{"version":3,"sources":["components/Widget/index.constant.ts","components/fields/Select.tsx","utils/index.util.ts","components/fields/Calendar.tsx","store/store.constants.ts","utils/validate.util.ts","components/DoctorSelect/index.tsx","api/index.constant.ts","api/index.ts","api/data.api.ts","store/action-creators.ts","store/index.ts","components/fields/Input.tsx","components/fields/CheckboxInput.tsx","components/fields/MaskedInput.tsx","components/Personal/index.tsx","components/Result/index.tsx","components/Widget/index.tsx","App.tsx","index.tsx"],"names":["SiteAdresses","ClinicIds","SelectInput","resetHandle","resetDeps","list","name","title","validate","disabled","itemList","input","meta","Tooltip","FormControl","InputLabel","className","touched","error","htmlFor","CircularProgress","Select","onChange","event","target","value","label","map","item","MenuItem","id","FormHelperText","Months","DaysOfWeek","mapStateToSelectList","getStartNull","num","String","getISODate","date","getFullYear","getMonth","getDate","getHours","getMinutes","now","Date","isEqualDate","first","second","getVisibleTime","getVisibleDateTime","getVisibleDate","getDateForCalendarTitle","getDay","getMonthGenitive","month","monthName","lastChar","length","replace","formatFormValues","values","address","result","sourceCode","SITE_MAIN","Object","entries","forEach","key","trim","nowPlusMonth","setMonth","ActionTypes","Calendar","state","useState","isOpen","setIsOpen","setDate","dateList","useMemo","doctor","specialization","schedule","filter","count","localDate","dateItem","time","doctorItem","doctors","find","doc","duration","startTime","timeStart","endTime","timeEnd","thisDate","thisDateStr","setMinutes","indexElem","findIndex","elem","push","timeItem","getDateList","form","useForm","changeCalendarVisibility","val","changeCalendarMonth","vector","prev","color","variant","OutlinedInput","onFocus","type","console","log","endAdornment","InputAdornment","position","IconButton","onClick","edge","CalendarToday","Dialog","fullScreen","screenWidth","PaperProps","style","maxWidth","onClose","open","disableRestoreFocus","DialogTitle","size","ArrowBackIosNew","ArrowForwardIos","Close","DialogContent","timeIndex","change","getTime","isRequired","isLength","min","max","DoctorSelect","formValues","getState","isKT","clinic","SITE_SECOND","selectList","clinics","order","Array","from","Set","deps","includes","sortedSelectList","sort","a","b","Stack","spacing","parent","some","hasntValue","APIConstants","API","urlParams","params","method","this","request","data","undefined","url","getParamsFromObject","fetch","body","JSON","stringify","headers","Authorization","btoa","response","json","object","join","getData","startDate","get","setAppointment","setLoadingAC","payload","SET_LOADING","initialState","loading","specializations","document","documentElement","clientWidth","appointment","rootReducer","action","SET_DATA","SET_WIDTH","SET_APPOINTMENT_DATA","Input","props","TextField","width","FormControlLabel","control","Checkbox","TextMaskCustom","React","forwardRef","ref","mask","other","onBlur","onAccept","inputRef","overwrite","MaskedInput","inputComponent","Personal","visible","inputVisibility","setInputVisibility","inputList","visibleName","visibility","CheckboxInput","Button","stateCopy","elemIndex","Result","useParams","history","useHistory","isError","status","text","getResultText","Icon","ErrorOutlineIcon","CheckCircleOutlineIcon","Grid","container","marginTop","xs","fontSize","Typography","marginBottom","DialogActions","Widget","activeStep","setActiveStep","useReducer","dispatch","siteAddress","useContext","SITE_ADDRESS","initialValues","SITE_DEV","confirm","steps","VisibleComponent","makeAppointment","sendValues","handleSubmit","reset","localGetData","changeWindowWidth","useEffect","window","addEventListener","removeEventListener","path","exact","onSubmit","hasValidationErrors","Stepper","orientation","completed","Step","StepLabel","Box","fields","batch","startIcon","placement","sx","display","Paths","createContext","location","origin","App","ReactDOM","render","hashType","getElementById"],"mappings":"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","file":"static/js/main.73fe2841.chunk.js","sourcesContent":["export enum SiteAdresses {\r\n    SITE_MAIN = 'https://longavitas.ru',\r\n    SITE_SECOND = 'https://longavita-ct.ru',\r\n    SITE_DEV = 'http://localhost:3000',\r\n}\r\n\r\nexport enum ClinicIds {\r\n    SITE_MAIN = '058826cf-b50f-11e9-a205-ac1f6b67f28a',\r\n    SITE_SECOND = '9d050044-1007-11ec-a220-ac1f6b67f28a',\r\n}\r\n\r\nexport const Months = [\r\n  'Январь',\r\n  'Февраль',\r\n  'Март',\r\n  'Апрель',\r\n  'Май',\r\n  'Июнь',\r\n  'Июль',\r\n  'Август',\r\n  'Сентябрь',\r\n  'Октябрь',\r\n  'Ноябрь',\r\n  'Декабрь',\r\n];\r\n\r\nexport const DaysOfWeek = [\r\n  'Вс',\r\n  'Пн',\r\n  'Вт',\r\n  'Ср',\r\n  'Чт',\r\n  'Пт',\r\n  'Сб',\r\n];","import React, { FC } from 'react';\r\nimport { Field } from 'react-final-form';\r\nimport {\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Tooltip,\r\n  FormHelperText,\r\n  SelectChangeEvent, CircularProgress\r\n} from \"@mui/material\";\r\n\r\nimport { ISelect } from \"./input.types\";\r\n\r\nconst SelectInput: FC<ISelect> = ({\r\n  resetHandle,\r\n  resetDeps,\r\n  list,\r\n  name,\r\n  title,\r\n  validate,\r\n  disabled\r\n}) => {\r\n  const itemList = list || [];\r\n  return (\r\n    <Field name={name} validate={validate}>\r\n      {({input, meta}) => {\r\n        const onChangeHandle = (event: SelectChangeEvent) => {\r\n          resetHandle && resetHandle(resetDeps);\r\n          input.onChange(event.target.value);\r\n        }\r\n        return (\r\n          <Tooltip title={disabled ? 'Заполните предыдущие поля' : ''}>\r\n            <FormControl>\r\n              <InputLabel\r\n                className={!disabled && meta.touched && meta.error && 'UMC-widget-input-error'}\r\n                htmlFor={name}>\r\n                {list ? title : <CircularProgress />}\r\n              </InputLabel>\r\n              <Select\r\n                error={!!(meta.touched && meta.error)}\r\n                disabled={disabled}\r\n                {...input}\r\n                onChange={onChangeHandle}\r\n                label={title}\r\n                className={'UMC-widget-input UMC-widget-select'}>\r\n                {itemList.map(item => (\r\n                  <MenuItem key={item.id} value={item.value}>{item.name}</MenuItem>\r\n                ))}\r\n              </Select>\r\n              {!disabled && meta.touched && meta.error\r\n                && <FormHelperText\r\n                    className={'UMC-widget-input-error'}>\r\n                  {meta.error}\r\n                </FormHelperText>}\r\n            </FormControl>\r\n          </Tooltip>\r\n        );\r\n      }}\r\n    </Field>\r\n  );\r\n};\r\n\r\nexport default SelectInput;","import { TSelectItem, TCalendarItem, TCalendarTimeItem } from \"../components/fields/input.types\";\r\nimport { TAppState, TClinicItem, TDoctorItem, TFormValues, TScheduleItem } from \"../store/store.types\";\r\nimport { DaysOfWeek, Months, SiteAdresses } from \"../components/Widget/index.constant\";\r\n\r\nexport const mapStateToSelectList = <Type extends TClinicItem | TDoctorItem>(list: Type[] | null | undefined): TSelectItem[] | [] => {\r\n  if (!list) return [];\r\n  return list.map(item => {\r\n    return {id: item.id, value: item.id, name: item.name};\r\n  });\r\n};\r\n\r\nexport const mapSpecializationsToSelectList = (list: TScheduleItem[] | null | undefined): TSelectItem[] | [] => {\r\n  if (!list) return [];\r\n  const specializations = Array.from(\r\n    new Set(list.filter(item => item.specialization).map(item => item.specialization))\r\n  );\r\n  return specializations.map(item => (\r\n    {id: item, value: item, name: item}\r\n  ));\r\n};\r\n\r\nexport const getStartNull = (num: number): string => {\r\n  if (num < 10) {\r\n    return '0' + num;\r\n  }\r\n  return String(num);\r\n};\r\n\r\nexport const getISODate = (date: Date): string => {\r\n  return date.getFullYear() + '-'\r\n    + getStartNull(date.getMonth() + 1) + '-'\r\n    + getStartNull(date.getDate()) + 'T'\r\n    + getStartNull(date.getHours()) + ':'\r\n    + getStartNull(date.getMinutes()) + ':00';\r\n};\r\n\r\nexport const getISOTime = (date: Date): string => {\r\n  return getStartNull(date.getHours()) + ':'\r\n    + getStartNull(date.getMinutes());\r\n};\r\n\r\nconst now = new Date();\r\n\r\nexport const isFreeDate = (time: (string[][] | undefined)[] | undefined) => (date: Date): boolean => {\r\n  if (date < now) return false;\r\n  if (!time) return false;\r\n  return time.some(item => {\r\n    if (!item) return false;\r\n    return item.some(elem => {\r\n      const now = new Date(elem[0]);\r\n      return isEqualDate(date, now);\r\n    });\r\n  })\r\n};\r\n\r\nexport const getDateList = (\r\n  date: Date,\r\n  state: TAppState,\r\n  { doctor, specialization }: TFormValues\r\n): TCalendarItem[] | null => {\r\n  if (!specialization) {\r\n    return null;\r\n  }\r\n  const schedule = doctor\r\n    ? state.schedule?.filter(item => item.doctor === doctor)\r\n    : state.schedule?.filter(item => item.specialization === specialization);\r\n\r\n  let count = 0;\r\n  const localDate = new Date(date);\r\n  const result: TCalendarItem[] = [];\r\n  while(count < 5) {\r\n    const dateItem: TCalendarItem = {\r\n      date: new Date(localDate),\r\n      time: []\r\n    };\r\n\r\n    schedule!.forEach(item => {\r\n      const doctorItem = state.doctors!.find(doc => doc.id === item.doctor);\r\n      const duration = doctorItem!.duration;\r\n      item.time.forEach(time => {\r\n        const startTime = new Date(time.timeStart);\r\n        if (isEqualDate(startTime, localDate)) {\r\n          const endTime = new Date(time.timeEnd);\r\n          while (startTime < endTime) {\r\n            const thisDate = new Date(startTime);\r\n            const thisDateStr = getVisibleTime(thisDate);\r\n            startTime.setMinutes(startTime.getMinutes() + duration);\r\n            if (startTime <= endTime) {\r\n              const indexElem = dateItem.time.findIndex(elem => elem.time === thisDateStr);\r\n              if (indexElem >= 0) {\r\n                dateItem.time[indexElem].doctors.push(doctorItem!.id);\r\n              } else {\r\n                const timeItem: TCalendarTimeItem = {\r\n                  date: thisDate,\r\n                  time: thisDateStr,\r\n                  doctors: [doctorItem!.id],\r\n                };\r\n                dateItem.time.push(timeItem);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n    })\r\n    localDate.setDate(localDate.getDate() + 1);\r\n    result.push(dateItem);\r\n    count++;\r\n  }\r\n  return result\r\n    // .filter(item => item.time.length);\r\n}\r\n\r\n// const getTimeItems = (): TCalendarTimeItem => {\r\n//\r\n// }\r\n\r\nexport const isEqualDate = (first: Date | null, second: Date | null = now): boolean => {\r\n  if (!first || !second) return false;\r\n  return first.getDate() === second.getDate()\r\n    && first.getMonth() === second.getMonth()\r\n    && first.getFullYear() === second.getFullYear();\r\n}\r\n\r\nexport const isEqualTime = (first: Date | null, second: Date | null = now): boolean => {\r\n  if (!first || !second) return false;\r\n  return first.getHours() === second.getHours()\r\n    && first.getMinutes() === second.getMinutes();\r\n}\r\n\r\nexport const getTimeByDate = (date: Date | null, time: (string[][] | undefined)[] | undefined): Date[] => {\r\n  if (!time || !date) return [];\r\n  const result: Date[] = [];\r\n  time.forEach(item => {\r\n    item?.forEach(elem => {\r\n      elem.forEach(dateStr => {\r\n        const thisDate = new Date(dateStr);\r\n        if (isEqualDate(thisDate, date)) {\r\n          result.push(thisDate);\r\n        }\r\n      })\r\n    });\r\n  });\r\n  return Array.from(new Set(result));\r\n}\r\n\r\nexport const getVisibleDate = (date: Date | null): string => {\r\n  if (!date) return '';\r\n  return getStartNull(date.getDate()) + '.'\r\n    + getStartNull(date.getMonth() + 1) + '.'\r\n    + date.getFullYear();\r\n}\r\n\r\nexport const getVisibleTime = (date: Date | null): string => {\r\n  if (!date) return '';\r\n  return getStartNull(date.getHours()) + ':'\r\n    + getStartNull(date.getMinutes());\r\n}\r\n\r\nexport const getVisibleDateTime = (date: Date | null): string => {\r\n  if (!date) return '';\r\n  return getVisibleDate(date) + ' ' + getVisibleTime(date);\r\n}\r\n\r\nexport const getDateForCalendarTitle = (date: Date | null): string => {\r\n  if (!date) return '';\r\n  return `${DaysOfWeek[date.getDay()]}, ${date.getDate()} ${getMonthGenitive(date.getMonth())}`;\r\n}\r\n\r\nexport const getMonthGenitive = (month: number): string => {\r\n  const monthName = Months[month];\r\n  if (month === 2) {\r\n    return monthName + 'а';\r\n  }\r\n  const lastChar = monthName[monthName.length - 1];\r\n  return monthName.replace(lastChar, 'я');\r\n}\r\n\r\ntype TAppointmentValues = {[key: string]: string | number | boolean};\r\n\r\nexport const formatFormValues = (values: TFormValues, address: string): TAppointmentValues => {\r\n  const result: TAppointmentValues = {\r\n    sourceCode: address === SiteAdresses.SITE_MAIN ? 38 : 141,\r\n  };\r\n  const entries = Object.entries(values);\r\n  entries.forEach(([key, value]) => {\r\n    if (typeof value === 'string') {\r\n      result[key] = value.trim();\r\n    } else if (typeof value === 'object') {\r\n      result[key] = getISODate(values.date.date)\r\n    } else {\r\n      result[key] = value;\r\n    }\r\n  })\r\n  return result;\r\n}","import React, { FC, useState, useMemo } from 'react';\r\nimport { Field, useForm } from 'react-final-form';\r\n\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  FormControl,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  Tooltip,\r\n  FormHelperText\r\n} from \"@mui/material\";\r\nimport { CalendarToday, ArrowBackIosNew, ArrowForwardIos, Close } from '@mui/icons-material';\r\n\r\nimport { ICalendar, TCalendarTimeItem } from \"./input.types\";\r\nimport {\r\n  getDateForCalendarTitle,\r\n  getDateList,\r\n  getVisibleDateTime,\r\n} from \"../../utils/index.util\";\r\n\r\ntype TIconColor = 'inherit' | 'error' | 'disabled';\r\nconst now = new Date();\r\nconst nowPlusMonth = new Date(now);\r\nnowPlusMonth.setMonth(nowPlusMonth.getMonth() + 1);\r\n\r\nconst Calendar: FC<ICalendar> = (\r\n  { name, title, validate, disabled, state, values }\r\n) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [date, setDate] = useState(now);\r\n  const dateList = useMemo(() => getDateList(date, state, values), [values.doctor, date, values.specialization]);\r\n  const form = useForm();\r\n\r\n  const changeCalendarVisibility = (val: boolean): void => {\r\n    setIsOpen(val);\r\n  }\r\n\r\n  const changeCalendarMonth = (vector: boolean): void => {\r\n    if (vector) {\r\n      setDate(prev => {\r\n        const localDate = new Date(prev);\r\n        localDate.setDate(prev.getDate() + 5);\r\n        return localDate;\r\n      })\r\n    } else {\r\n      setDate(prev => {\r\n        const localDate = new Date(prev);\r\n        localDate.setDate(prev.getDate() - 5);\r\n        if (now > localDate) {\r\n          return now;\r\n        }\r\n        return localDate;\r\n      })\r\n    }\r\n  }\r\n\r\n  // infinite reload\r\n  // useEffect(() => {\r\n  //   if (dateList?.every(item => !item.time.length)) {\r\n  //     changeCalendarMonth(true);\r\n  //   }\r\n  // }, [date])\r\n\r\n  return (\r\n    <Field name={name} validate={validate}>\r\n      {({input, meta}) => {\r\n        const onChange = (date: TCalendarTimeItem) => {\r\n          input.onChange(date);\r\n          if (date.doctors.length === 1) {\r\n            form.change('doctor', date.doctors[0]);\r\n          }\r\n          setIsOpen(false);\r\n        }\r\n        const value = getVisibleDateTime(input.value.date);\r\n        let color: TIconColor = 'inherit';\r\n        if (meta.touched && meta.error) color = 'error';\r\n        if (disabled) color = 'disabled';\r\n        return (\r\n          <>\r\n            <Tooltip title={disabled ? 'Заполните предыдущие поля' : ''}>\r\n              <FormControl variant=\"outlined\">\r\n                <InputLabel\r\n                  className={!disabled && meta.touched && meta.error && 'UMC-widget-input-error'}\r\n                  htmlFor=\"date\">\r\n                  {title}\r\n                </InputLabel>\r\n                <OutlinedInput\r\n                  error={!!(meta.touched && meta.error)}\r\n                  onFocus={() => changeCalendarVisibility(true)}\r\n                  id=\"date\"\r\n                  type={'text'}\r\n                  value={value}\r\n                  onChange={() => console.log(input.value)}\r\n                  disabled={disabled}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        disabled={disabled}\r\n                        onClick={() => changeCalendarVisibility(true)}\r\n                        edge=\"end\"\r\n                      >\r\n                        <CalendarToday color={color} />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  label={title}\r\n                />\r\n                {!disabled && meta.touched && meta.error\r\n                  && <FormHelperText\r\n                      className={'UMC-widget-input-error'}>\r\n                    {meta.error}\r\n                  </FormHelperText>}\r\n              </FormControl>\r\n            </Tooltip>\r\n            <Dialog\r\n              fullScreen={state.screenWidth <= 768}\r\n              PaperProps={{\r\n                style: {\r\n                  maxWidth: state.screenWidth <= 768 ? '100vw' : '95vw',\r\n                }\r\n              }}\r\n              onClose={() => changeCalendarVisibility(false)}\r\n              open={isOpen}\r\n              disableRestoreFocus\r\n            >\r\n              <div className={'UMC-widget-calendar-wrapper'}>\r\n                <DialogTitle>\r\n                  <div className={'UMC-widget-calendar-header'}>\r\n                    <IconButton\r\n                      disabled={now >= date}\r\n                      onClick={() => changeCalendarMonth(false)}\r\n                      size={state.screenWidth < 450 ? 'small' : 'medium'}\r\n                    >\r\n                      <ArrowBackIosNew />\r\n                    </IconButton>\r\n                    <div className={'UMC-widget-calendar-header__text UMC-widget-title'}>\r\n                      {getDateForCalendarTitle(date)}\r\n                    </div>\r\n                    <IconButton\r\n                      disabled={date >= nowPlusMonth}\r\n                      onClick={() => changeCalendarMonth(true)}\r\n                      size={state.screenWidth < 450 ? 'small' : 'medium'}\r\n                    >\r\n                      <ArrowForwardIos />\r\n                    </IconButton>\r\n                  </div>\r\n                  <IconButton\r\n                    className={'UMC-widget__btn-exit'}\r\n                    onClick={() => changeCalendarVisibility(false)}\r\n                  >\r\n                    <Close />\r\n                  </IconButton>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                  <div className=\"UMC-widget-calendar-block\">\r\n                    <div className={'UMC-widget-calendar__grid'}>\r\n                      {dateList?.map(item => (\r\n                        <div key={item.date.getTime()} className={'UMC-widget-calendar__column'}>\r\n                          <h3 className={item.time.length\r\n                            ? 'UMC-widget-calendar__column-title'\r\n                            : 'UMC-widget-calendar__column-text_grey UMC-widget-calendar__column-title'}>\r\n                            {getDateForCalendarTitle(item.date)}\r\n                          </h3>\r\n                          <div className=\"UMC-widget-calendar__column-content\">\r\n                            {item.time.length\r\n                              ? item.time.map((time, timeIndex) => (\r\n                                <p\r\n                                  key={item.date.getTime() + timeIndex}\r\n                                  onClick={() => onChange(time)}\r\n                                  className={'UMC-widget-calendar__box UMC-widget-calendar__box_free'}>{time.time}</p>\r\n                              ))\r\n                              : <p className={'UMC-widget-calendar__column-text UMC-widget-calendar__column-text_grey'}>\r\n                                Нет времени для записи\r\n                              </p>\r\n                            }\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </DialogContent>\r\n              </div>\r\n            </Dialog>\r\n          </>\r\n        );\r\n      }}\r\n    </Field>\r\n  );\r\n};\r\n\r\nexport default Calendar;","export enum ActionTypes {\r\n  SET_CLINICS = 'SET_CLINICS',\r\n  SET_LOADING = 'SET_LOADING',\r\n  SET_DATA = 'SET_DATA',\r\n  SET_WIDTH = 'SET_WIDTH',\r\n  SET_APPOINTMENT_DATA = 'SET_APPOINTMENT_DATA',\r\n}","export const isRequired = (value: string | boolean): string | undefined => {\r\n  if (!value) return 'Это поле обязательно';\r\n}\r\n\r\nexport const isLength = (\r\n  min: number | undefined = 1,\r\n  max: number | undefined = 1\r\n) => (value: string): string | undefined => {\r\n  if (!value) return 'Это поле обязательно';\r\n  if (value.length < min) return `Длина поля должна быть не менее ${min} символов`;\r\n  if (value.length > max) return `Длина поля должна быть не более ${max} символов`;\r\n}","import React, { FC } from 'react';\r\nimport { Stack } from \"@mui/material\";\r\n\r\nimport Select from \"../fields/Select\";\r\nimport { mapSpecializationsToSelectList, mapStateToSelectList } from \"../../utils/index.util\";\r\n\r\nimport { ICalendar, ISelect } from \"../fields/input.types\";\r\nimport { TStepComponent } from \"./index.types\";\r\nimport { TFormValues } from \"../../store/store.types\";\r\nimport Calendar from \"../fields/Calendar\";\r\nimport { isRequired } from \"../../utils/validate.util\";\r\nimport { useForm } from \"react-final-form\";\r\nimport { ClinicIds } from \"../Widget/index.constant\";\r\n\r\nconst DoctorSelect: FC<TStepComponent> = ({resetHandle, state}) => {\r\n\r\n  const form = useForm<TFormValues>();\r\n  const formValues = form.getState().values;\r\n\r\n  const isKT = formValues.clinic === ClinicIds.SITE_SECOND;\r\n\r\n  const selectList: (ISelect | ICalendar)[] = [\r\n    {list: mapStateToSelectList(state.clinics),\r\n      name: 'clinic',\r\n      validate: isRequired,\r\n      title: 'Выберите филиал',\r\n      type: 'select',\r\n      resetDeps: ['specialization', 'doctor', 'date'],\r\n      order: 1,\r\n      id: 1},\r\n    {list: mapSpecializationsToSelectList(state.schedule\r\n        ?.filter(item => item.clinic === formValues.clinic)),\r\n      name: 'specialization',\r\n      title: 'Выберите специализацию',\r\n      validate: isRequired,\r\n      type: 'select',\r\n      id: 2,\r\n      resetDeps: ['doctor', 'date'],\r\n      order: 2,\r\n      deps: ['clinic']},\r\n    {list: isKT\r\n        ? mapStateToSelectList(state.doctors?.filter(item => {\r\n          const doctor = state.schedule?.find(elem => elem.doctor === item.id);\r\n          return formValues.date?.doctors?.includes(item.id) && doctor;\r\n        }))\r\n        : mapStateToSelectList(state.doctors?.filter(item => {\r\n          const doctor = state.schedule?.find(elem => elem.doctor === item.id);\r\n          return item.specialization === formValues.specialization && doctor;\r\n        })),\r\n      name: 'doctor',\r\n      title: 'Выберите врача',\r\n      validate: isRequired,\r\n      type: 'select',\r\n      id: 3,\r\n      resetDeps: isKT ? [] : ['date'],\r\n      order: isKT ? 4 : 3,\r\n      deps: isKT ? ['clinic', 'specialization', 'date'] : ['clinic', 'specialization']},\r\n    {name: 'date',\r\n      title: 'Выберите дату приема',\r\n      validate: isRequired,\r\n      type: 'date',\r\n      id: 4,\r\n      values: formValues,\r\n      order: isKT ? 3 : 4,\r\n      state: state,\r\n      deps: isKT ? ['clinic', 'specialization'] : ['clinic', 'specialization', 'doctor']},\r\n  ];\r\n\r\n  const hasntValue = (item: (keyof TFormValues)[], parent: TFormValues): boolean => {\r\n    return item.some(elem => {\r\n      return !(elem in parent && parent[elem]);\r\n    })\r\n  };\r\n\r\n  const sortedSelectList = selectList.sort((a, b) => (a.order || 0) - (b.order || 0));\r\n\r\n  return (\r\n    <Stack spacing={2}>\r\n      {sortedSelectList.map(item => {\r\n        const disabled = item.deps ? hasntValue(item.deps, formValues) : false;\r\n        if (item.type === 'select') {\r\n          return (\r\n            <Select resetHandle={resetHandle} key={item.id} {...item} disabled={disabled} />\r\n          );\r\n        } else if (item.type === 'date') {\r\n          return (\r\n            <Calendar key={item.id} disabled={disabled} {...item as ICalendar} />\r\n          );\r\n        }\r\n      })}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default DoctorSelect;","export const APIConstants = {\r\n  API_URL: process.env.NODE_ENV === 'production'\r\n    ? 'https://longavitas.ru/lib/widget' : 'http://longa.loc',\r\n  API_LOGIN: 'admin',\r\n  API_PASSWORD: 'admin'\r\n}","import { APIConstants } from \"./index.constant\";\r\nimport { TApiParams, TUrlParams } from \"./index.types\";\r\n\r\nclass API {\r\n  public async get(urlParams: TUrlParams): Promise<any> {\r\n    const params: TApiParams = {\r\n      method: 'GET',\r\n      params: urlParams\r\n    };\r\n    return this.request(params);\r\n  }\r\n\r\n  public async post(data: any, urlParams?: TUrlParams): Promise<any> {\r\n    const params: TApiParams = {\r\n      method: 'POST',\r\n      params: urlParams\r\n    };\r\n    return this.request(params, data);\r\n  }\r\n\r\n  private async request(params: TApiParams, data: any | undefined = undefined): Promise<any> {\r\n    try {\r\n      const url = APIConstants.API_URL + (params.params ? this.getParamsFromObject(params.params) : '');\r\n      const response = await fetch(url, {\r\n        method: params.method,\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n          Authorization: \"Basic \" + btoa(APIConstants.API_LOGIN + ':' + APIConstants.API_PASSWORD),\r\n        }\r\n      })\r\n      return await response.json();\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  private getParamsFromObject(object: {[key: string]: string}): string {\r\n    const objectParams = Object.entries(object).map(item => item.join('='));\r\n    return '?' + objectParams.join('&');\r\n  }\r\n}\r\n\r\nexport default new API();","import API from './index';\r\n\r\nimport { TApiPayload } from \"../store/store.types\";\r\nimport { getISODate } from \"../utils/index.util\";\r\n\r\nexport const getData = async (date: Date | undefined = undefined): Promise<TApiPayload> => {\r\n  const startDate = getISODate(date ? new Date(date) : new Date());\r\n  return API.get({startDate});\r\n}\r\n\r\nexport const setAppointment = async (values: {[key: string]: string | number | boolean}): Promise<any> => {\r\n  // return API.post(values);\r\n  return true;\r\n}","import { TActionCreator, TApiPayload, TFormValues } from \"./store.types\";\r\nimport { ActionTypes } from \"./store.constants\";\r\n\r\nexport const setLoadingAC: TActionCreator<boolean> = (payload) => {\r\n  return {type: ActionTypes.SET_LOADING, payload};\r\n}\r\nexport const setDataAC: TActionCreator<TApiPayload> = (payload) => {\r\n  return {type: ActionTypes.SET_DATA, payload};\r\n}\r\nexport const setWidthAC: TActionCreator<number> = (payload) => {\r\n  return {type: ActionTypes.SET_WIDTH, payload};\r\n}\r\nexport const setAppointmentDataAC: TActionCreator<any> = (payload) => {\r\n  return {type: ActionTypes.SET_APPOINTMENT_DATA, payload};\r\n}","import { Reducer } from \"react\";\r\n\r\nimport { TAction, TAppState } from \"./store.types\";\r\nimport { ActionTypes } from \"./store.constants\";\r\n\r\nexport const initialState: TAppState = {\r\n  clinics: null,\r\n  schedule: null,\r\n  loading: false,\r\n  doctors: null,\r\n  specializations: null,\r\n  screenWidth: document.documentElement.clientWidth,\r\n  appointment: null,\r\n}\r\n\r\nexport const rootReducer: Reducer<TAppState, TAction<any>> = (state, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_LOADING: {\r\n      return {...state, loading: action.payload};\r\n    }\r\n    case ActionTypes.SET_DATA: {\r\n      return {\r\n        ...state,\r\n        clinics: action.payload.clinics,\r\n        schedule: action.payload.schedule,\r\n        doctors: action.payload.doctors,\r\n        specializations: action.payload.specializations\r\n      };\r\n    }\r\n    case ActionTypes.SET_WIDTH: {\r\n      return {\r\n        ...state,\r\n        screenWidth: action.payload\r\n      };\r\n    }\r\n    case ActionTypes.SET_APPOINTMENT_DATA: {\r\n      return {\r\n        ...state,\r\n        appointment: action.payload\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}","import React, { FC } from 'react';\r\nimport { Field } from 'react-final-form';\r\n\r\nimport { FormHelperText, TextField } from \"@mui/material\";\r\nimport { IInput } from \"./input.types\";\r\n\r\nconst Input: FC<IInput> = (props) => {\r\n\r\n  return (\r\n    <Field name={props.name} validate={props.validate}>\r\n      {({ input, meta }) => (\r\n        <div>\r\n          <TextField\r\n            style={{width: '100%'}}\r\n            error={!!(meta.touched && meta.error)}\r\n            label={props.title}\r\n            {...input}\r\n          />\r\n          {meta.touched && meta.error\r\n            && <FormHelperText\r\n              className={'UMC-widget-input-error'}>\r\n              {meta.error}\r\n            </FormHelperText>}\r\n        </div>\r\n      )}\r\n    </Field>\r\n  );\r\n};\r\n\r\nexport default Input;","import React, { FC } from 'react';\r\nimport { Field } from 'react-final-form';\r\nimport { Checkbox, FormControlLabel, FormHelperText } from \"@mui/material\";\r\nimport { IInput } from \"./input.types\";\r\n\r\nconst Input: FC<IInput> = (props) => {\r\n  return (\r\n    <Field name={props.name} type={'checkbox'} validate={props.validate} >\r\n      {({ input, meta }) => (\r\n        <div>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                {...input}\r\n                value={input.value || ''}\r\n              />\r\n            }\r\n            label={props.title} />\r\n            {meta.touched && meta.error\r\n              && <FormHelperText\r\n                  className={'UMC-widget-input-error'}>\r\n                {meta.error}\r\n              </FormHelperText>}\r\n        </div>\r\n      )}\r\n    </Field>\r\n  );\r\n};\r\n\r\nexport default Input;","import React, { FC } from 'react';\r\nimport { Field } from 'react-final-form';\r\nimport { IMaskInput } from \"react-imask\";\r\n\r\nimport { FormHelperText, OutlinedInput, InputLabel, FormControl } from \"@mui/material\";\r\nimport { IInput } from \"./input.types\";\r\n\r\nconst TextMaskCustom = React.forwardRef<HTMLElement, any>(\r\n  function TextMaskCustom(props, ref) {\r\n    const mask = props.mask || '+7 (000) 00-00-000';\r\n    const { value, onChange, ...other } = props;\r\n    return (\r\n      <IMaskInput\r\n        {...other}\r\n        onBlur={props.onBlur}\r\n        onFocus={props.onFocus}\r\n        onAccept={(value: string) => {\r\n          const val = value.replace(/\\D+/g,'');\r\n          console.log(val);\r\n          props.onChange(val);\r\n        }}\r\n        id={props.id}\r\n        mask={mask}\r\n        inputRef={ref}\r\n        overwrite\r\n      />\r\n    );\r\n  },\r\n);\r\n\r\nconst MaskedInput: FC<IInput> = (props) => {\r\n\r\n  return (\r\n    <Field name={props.name} validate={props.validate}>\r\n      {({ input, meta }) => (\r\n        <FormControl>\r\n          <InputLabel\r\n            className={!props.disabled && meta.touched && meta.error && 'UMC-widget-input-error'}\r\n            htmlFor=\"number\">\r\n            {props.title}\r\n          </InputLabel>\r\n          <OutlinedInput\r\n            {...props}\r\n            {...input}\r\n            label={props.title}\r\n            id={'number'}\r\n            error={!!(meta.touched && meta.error)}\r\n            inputComponent={TextMaskCustom as any}\r\n          />\r\n          {meta.touched && meta.error\r\n            && <FormHelperText\r\n                className={'UMC-widget-input-error'}>\r\n              {meta.error}\r\n            </FormHelperText>}\r\n        </FormControl>\r\n      )}\r\n    </Field>\r\n  );\r\n};\r\n\r\nexport default MaskedInput;","import React, { FC, useState } from 'react';\r\nimport { Stack, Button } from \"@mui/material\";\r\nimport { IInput } from \"../fields/input.types\";\r\nimport { TStepComponent } from \"../DoctorSelect/index.types\";\r\nimport Input from \"../fields/Input\";\r\nimport CheckboxInput from \"../fields/CheckboxInput\";\r\nimport { isLength, isRequired } from \"../../utils/validate.util\";\r\nimport MaskedInput from \"../fields/MaskedInput\";\r\n\r\nconst Personal: FC<TStepComponent> = () => {\r\n  const [inputVisibility, setInputVisibility] = useState([\r\n    {name: 'address', visible: false}, {name: 'comment', visible: false}\r\n  ]);\r\n\r\n  const inputList: IInput[] = [\r\n    {name: 'name',\r\n      validate: isLength(2, 20),\r\n      title: 'Введите имя',\r\n      type: 'input',\r\n      id: 1},\r\n    {name: 'surname',\r\n      validate: isLength(2, 20),\r\n      title: 'Введите фамилию',\r\n      type: 'input',\r\n      id: 2},\r\n    {name: 'number',\r\n      validate: isLength(11, 11),\r\n      title: 'Введите телефон',\r\n      mask: '+7 (000) 00-00-000',\r\n      type: 'input',\r\n      id: 3},\r\n    {name: 'address',\r\n      title: 'Введите адрес',\r\n      type: 'input',\r\n      visibleName: 'Адрес',\r\n      visibility: inputVisibility[0].visible,\r\n      id: 5},\r\n    {name: 'comment',\r\n      title: 'Введите комментарий',\r\n      visibleName: 'Комментарий',\r\n      visibility: inputVisibility[1].visible,\r\n      type: 'input',\r\n      id: 6},\r\n    {name: 'confirm',\r\n      validate: isRequired,\r\n      title: 'Я согласен с Политикой конфиденциальности',\r\n      type: 'checkbox',\r\n      id: 4},\r\n  ];\r\n\r\n  const changeInputVisibility = (name: string): void => {\r\n    setInputVisibility(prev => {\r\n      const stateCopy = [ ...prev ];\r\n      const elemIndex = prev.findIndex(item => item.name === name);\r\n      if (elemIndex >= 0) {\r\n        stateCopy[elemIndex] = {name, visible: true};\r\n        return stateCopy;\r\n      }\r\n      return prev;\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Stack spacing={2}>\r\n      {inputList.map(item => {\r\n        if (item.type === 'checkbox') {\r\n          return <CheckboxInput key={item.id} {...item} />;\r\n        }\r\n        if ('visibility' in item && !item.visibility) {\r\n          return (\r\n            <Button\r\n              key={item.id}\r\n              className={'UMC-widget__personal-btn'}\r\n              onClick={() => changeInputVisibility(item.name)}\r\n              size={'small'}>\r\n              {item.visibleName}\r\n            </Button>\r\n          )\r\n        }\r\n        if (item.mask) {\r\n          return <MaskedInput key={item.id} {...item} />;\r\n        }\r\n        return <Input key={item.id} {...item} />;\r\n      })}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default Personal;","import React, { FC } from 'react';\r\nimport { Button, DialogActions, DialogContent, Grid, Typography } from \"@mui/material\";\r\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\r\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\r\nimport { TAppState } from \"../../store/store.types\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { getVisibleDateTime } from \"../../utils/index.util\";\r\n\r\ntype TResult = {\r\n  state: TAppState;\r\n}\r\n\r\ntype TResultParam = {\r\n  status: 'success' | 'error';\r\n}\r\n\r\nconst getResultText = (state: TAppState): string => {\r\n  if (!state.appointment || !state.doctors || !state.clinics) return '';\r\n  const doctor = state.doctors.find(item => item.id === state?.appointment?.doctor);\r\n  const clinic = state.clinics.find(item => item.id === state?.appointment?.clinic);\r\n  const date = getVisibleDateTime(state.appointment.date.date);\r\n  return `Вы записаны на прием к доктору ${doctor?.name} на ${date} в клинику ${clinic?.name}`;\r\n}\r\n\r\nconst Result: FC<TResult> = (props) => {\r\n  const params = useParams<TResultParam>();\r\n  const history = useHistory();\r\n  const isError = params.status === 'error';\r\n  const title = isError ? 'Произошла ошибка!' : 'Запись выполнена';\r\n  const text = isError\r\n    ? 'Возникла ошибка при работе виджета записи. Попробуйте еще раз или зайдите позднее'\r\n    : getResultText(props.state);\r\n  const Icon = isError ? ErrorOutlineIcon : CheckCircleOutlineIcon;\r\n  return (\r\n    <>\r\n      <DialogContent>\r\n        <Grid container style={{marginTop: 40}}>\r\n          <Grid item xs={2}>\r\n            <Icon fontSize={'large'} color={isError ? 'error' : 'primary'} />\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Typography style={{marginBottom: 20}} variant=\"h5\">{title}</Typography>\r\n            <Typography>{text}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        {isError\r\n          ? <Button onClick={() => history.push('/appointment')}>\r\n            Попробовать еще раз\r\n          </Button>\r\n          : <Button onClick={() => history.push('/')}>\r\n            Хорошо\r\n          </Button>\r\n        }\r\n      </DialogActions>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Result;","import React, {FC, useContext, useEffect, useReducer, useState} from 'react';\r\nimport {Form} from 'react-final-form';\r\nimport {\r\n  Box,\r\n  Button,\r\n  CircularProgress,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle, IconButton,\r\n  Step,\r\n  StepLabel,\r\n  Stepper,\r\n  Tooltip\r\n} from \"@mui/material\";\r\n\r\nimport DoctorSelect from \"../DoctorSelect\";\r\nimport { getData, setAppointment } from \"../../api/data.api\";\r\nimport { setAppointmentDataAC, setDataAC, setLoadingAC, setWidthAC } from \"../../store/action-creators\";\r\nimport {initialState, rootReducer} from \"../../store\";\r\n\r\nimport {TFormValues} from \"../../store/store.types\";\r\nimport {TStep} from \"./index.types\";\r\nimport {TStepComponent} from \"../DoctorSelect/index.types\";\r\nimport {SITE_ADDRESS} from \"../../App\";\r\nimport {ClinicIds, SiteAdresses} from \"./index.constant\";\r\nimport Personal from \"../Personal\";\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport { Close } from \"@mui/icons-material\";\r\nimport { formatFormValues } from \"../../utils/index.util\";\r\nimport { FormApi } from \"final-form\";\r\nimport { Route, useHistory } from \"react-router-dom\";\r\nimport Result from \"../Result\";\r\n\r\nconst Widget: FC = () => {\r\n\r\n  const [isOpen, _] = useState(true);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [state, dispatch] = useReducer(rootReducer, initialState);\r\n  const history = useHistory();\r\n  const siteAddress = useContext(SITE_ADDRESS);\r\n\r\n  const initialValues = {\r\n    clinic: siteAddress === SiteAdresses.SITE_DEV ? ClinicIds.SITE_MAIN : ClinicIds.SITE_SECOND,\r\n    confirm: true,\r\n  };\r\n\r\n  const steps: TStep[] = [\r\n    {id: 0, title: 'Выбор врача'},\r\n    {id: 1, title: 'Личные данные'},\r\n  ];\r\n\r\n  const stepsContent: FC<TStepComponent>[] = [\r\n    DoctorSelect,\r\n    Personal\r\n  ];\r\n\r\n  const VisibleComponent = stepsContent[activeStep];\r\n\r\n  const makeAppointment = async (values: TFormValues): Promise<any> => {\r\n    // console.log(values);\r\n    const sendValues = formatFormValues(values, siteAddress);\r\n    return setAppointment(sendValues);\r\n  }\r\n\r\n  const handleSubmit = async (values: TFormValues, form: FormApi<TFormValues>): Promise<void> => {\r\n    if (activeStep) {\r\n      const result = await makeAppointment(values);\r\n      if (result) {\r\n        dispatch(setAppointmentDataAC(values));\r\n        form.reset();\r\n        history.push('/appointment/success');\r\n      } else {\r\n        history.push('/appointment/error');\r\n      }\r\n    } else {\r\n      setActiveStep(1);\r\n    }\r\n  }\r\n\r\n  const localGetData = async () => {\r\n    dispatch(setLoadingAC(true));\r\n    const result = await getData();\r\n    dispatch(setDataAC(result));\r\n    dispatch(setLoadingAC(false));\r\n  }\r\n\r\n  const changeWindowWidth = () => {\r\n    dispatch(setWidthAC(document.documentElement.clientWidth));\r\n  }\r\n\r\n  useEffect(() => {\r\n    localGetData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', changeWindowWidth);\r\n    return () => {\r\n      window.removeEventListener('resize', changeWindowWidth)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <Dialog maxWidth=\"xl\" open={isOpen} fullScreen={state.screenWidth <= 450}>\r\n      <div className={'UMC-widget-wrapper'}>\r\n        <DialogTitle>\r\n          Запись на прием\r\n          <IconButton\r\n            className={'UMC-widget__btn-exit'}\r\n            onClick={() => history.push('/')}\r\n          >\r\n            <Close />\r\n          </IconButton>\r\n        </DialogTitle>\r\n        <Route path={'/appointment/:status'}>\r\n          <Result state={state} />\r\n        </Route>\r\n        <Route path={'/appointment'} exact>\r\n        <Form onSubmit={handleSubmit} initialValues={initialValues}>\r\n          {({handleSubmit, form, values, touched, hasValidationErrors}) => {\r\n            const resetFields = (fields: (keyof TFormValues)[] | undefined) => {\r\n              if (fields) {\r\n                form.batch(() => {\r\n                  fields.forEach(item => form.change(item, ''))\r\n                });\r\n              }\r\n            }\r\n            return (\r\n              <form onSubmit={handleSubmit}>\r\n                <DialogContent>\r\n                  <Stepper orientation={state.screenWidth < 450 ? 'vertical' : 'horizontal'} className={'UMC-widget-steps__header'} activeStep={activeStep}>\r\n                    {steps.map(item => {\r\n                      const completed = item.id <= activeStep;\r\n                      return (\r\n                        <Step completed={completed} key={item.id}>\r\n                          <StepLabel>{item.title}</StepLabel>\r\n                        </Step>\r\n                      );\r\n                    })}\r\n                  </Stepper>\r\n                  <Box className={'UMC-widget-content'}>\r\n                    <VisibleComponent resetHandle={resetFields} state={state} />\r\n                  </Box>\r\n                </DialogContent>\r\n                <DialogActions className={'UMC-widget-btn-area'}>\r\n                  {activeStep\r\n                    ? <Button\r\n                      onClick={() => setActiveStep(0)}\r\n                      startIcon={<ArrowBackIcon />}\r\n                      type={'button'}>\r\n                      Назад\r\n                    </Button>\r\n                    : <></>}\r\n                  <Tooltip\r\n                    placement={'top'}\r\n                    title={touched && hasValidationErrors ? 'Заполните все обязательные поля' : ''}>\r\n                    <Button type={'submit'}>{activeStep ? 'Записаться' : 'Следующий шаг'}</Button>\r\n                  </Tooltip>\r\n                </DialogActions>\r\n              </form>\r\n            );\r\n          }}\r\n        </Form>\r\n      </Route>\r\n      </div>\r\n      {state.loading && <Box className={'UMC-widget-loading-screen'} sx={{display: 'flex'}}>\r\n          <CircularProgress/>\r\n      </Box>}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default Widget;","import React, { FC } from 'react';\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Widget from \"./components/Widget\";\r\n\r\nconst Paths: {[key: string]: string} = {\r\n  default: '/appointment'\r\n}\r\n\r\nexport const SITE_ADDRESS = React.createContext(window.location.origin);\r\n\r\nconst App: FC = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path={Paths.default}><Widget /></Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <HashRouter hashType={'noslash'}>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}