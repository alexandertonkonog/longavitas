{"version":3,"sources":["components/Widget/index.constant.ts","components/fields/Select.tsx","utils/index.util.ts","api/index.constant.ts","components/fields/Calendar.tsx","components/DoctorSelect/index.tsx","store/store.constants.ts","api/index.ts","api/data.api.ts","store/action-creators.ts","store/index.ts","components/Widget/index.tsx","App.tsx","index.tsx"],"names":["SiteAdresses","ClinicIds","SelectInput","list","name","title","validate","disabled","itemList","input","meta","Tooltip","placement","FormControl","InputLabel","htmlFor","Select","label","className","map","item","MenuItem","value","id","mapStateToSelectList","getStartNull","num","String","now","Date","getDateList","date","time","currentMonth","getMonth","localDate","isFreeDateHandle","some","elem","isEqualDate","isFreeDate","setDate","result","dayOfWeek","dateItem","free","empty","i","push","getEmptyDays","getDay","getDate","first","second","getFullYear","APIConstants","Months","DaysOfWeek","Calendar","state","useState","isOpen","setIsOpen","selectedDate","setSelectedDate","doctor","useField","doctors","find","doc","dateList","useMemo","changeCalendarVisibility","val","changeCalendarMonth","vector","prev","setMonth","variant","OutlinedInput","onFocus","type","endAdornment","InputAdornment","position","IconButton","onClick","edge","CalendarToday","Dialog","onClose","open","disableRestoreFocus","DialogTitle","ArrowBackIosNew","ArrowForwardIos","DialogContent","thisDate","isToday","Button","size","DoctorSelect","values","getData","selectList","clinics","specializations","deps","filter","specialization","useEffect","clinic","Stack","spacing","parent","hasntValue","ActionTypes","API","urlParams","params","method","this","request","data","undefined","url","API_URL","getParamsFromObject","fetch","body","headers","Authorization","btoa","API_LOGIN","API_PASSWORD","response","json","console","error","object","Object","entries","join","getClinics","a","get","getOtherData","clinicId","startDate","getHours","getMinutes","setLoadingAC","payload","SET_LOADING","setDataAC","SET_DATA","initialState","loading","rootReducer","action","SET_CLINICS","Widget","activeStep","useReducer","dispatch","siteAddress","useContext","SITE_ADDRESS","log","initialValues","SITE_DEV","SITE_MAIN","SITE_SECOND","steps","completed","VisibleComponent","handleSubmit","localGetClinic","localGetOtherData","forEach","doctorItem","employee","spec","includes","maxWidth","onSubmit","Stepper","Step","StepLabel","Box","DialogActions","sx","display","CircularProgress","Paths","React","createContext","window","location","origin","App","path","ReactDOM","render","hashType","document","getElementById"],"mappings":"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","file":"static/js/main.abec9046.chunk.js","sourcesContent":["export enum SiteAdresses {\r\n    SITE_MAIN = 'https://longavitas.ru',\r\n    SITE_SECOND = 'https://longavita-ct.ru',\r\n    SITE_DEV = 'http://localhost:3000',\r\n}\r\n\r\nexport enum ClinicIds {\r\n    SITE_MAIN = '058826cf-b50f-11e9-a205-ac1f6b67f28a',\r\n    SITE_SECOND = '9d050044-1007-11ec-a220-ac1f6b67f28a',\r\n}\r\n\r\nexport const Months = [\r\n  'Январь',\r\n  'Февраль',\r\n  'Март',\r\n  'Апрель',\r\n  'Май',\r\n  'Июнь',\r\n  'Июль',\r\n  'Август',\r\n  'Сентябрь',\r\n  'Октябрь',\r\n  'Ноябрь',\r\n  'Декабрь',\r\n];\r\n\r\nexport const DaysOfWeek = [\r\n  'Пн',\r\n  'Вт',\r\n  'Ср',\r\n  'Чт',\r\n  'Пт',\r\n  'Сб',\r\n  'Вс',\r\n];","import React, { FC, useEffect } from 'react';\r\nimport { Field } from 'react-final-form';\r\nimport { Select, MenuItem, FormControl, InputLabel, Tooltip } from \"@mui/material\";\r\n\r\nimport { ISelect } from \"./input.types\";\r\n\r\nconst SelectInput: FC<ISelect> = ({list, name, title, validate, disabled}) => {\r\n\r\n  const itemList = list || [];\r\n\r\n  return (\r\n    <Field name={name} validate={validate}>\r\n      {({input, meta}) => {\r\n        return (\r\n          <Tooltip placement={'right'} title={disabled ? 'Заполните предыдущие поля' : ''}>\r\n            <FormControl>\r\n              <InputLabel htmlFor={name}>{title}</InputLabel>\r\n              <Select\r\n                disabled={disabled}\r\n                {...input}\r\n                label={title}\r\n                className={'UMC-widget-input UMC-widget-select'}>\r\n                {itemList.map(item => (\r\n                  <MenuItem key={item.id} value={item.value}>{item.name}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Tooltip>\r\n        );\r\n      }}\r\n    </Field>\r\n  );\r\n};\r\n\r\nexport default SelectInput;","import { TSelectItem } from \"../components/fields/input.types\";\r\nimport { TAppState, TClinicItem } from \"../store/store.types\";\r\nimport { TCalendarItem } from \"../components/Widget/index.types\";\r\n\r\nexport const mapStateToSelectList = <Type extends TClinicItem | string>(list: Type[]): TSelectItem[] | [] => {\r\n  return list.map(item => {\r\n    return typeof item === 'string'\r\n      ? {id: item, value: item, name: item}\r\n      : {id: item.id, value: item.id, name: item.name};\r\n  });\r\n};\r\n\r\nexport const getStartNull = (num: number): string => {\r\n  if (num < 10) {\r\n    return '0' + num;\r\n  }\r\n  return String(num);\r\n};\r\n\r\nexport const getISODate = (date: Date): string => {\r\n  return date.getFullYear() + '-'\r\n    + getStartNull(date.getMonth() + 1) + '-'\r\n    + getStartNull(date.getDate()) + 'T'\r\n    + getStartNull(date.getHours()) + ':'\r\n    + getStartNull(date.getMinutes()) + ':00';\r\n};\r\n\r\nconst now = new Date();\r\n\r\nexport const isFreeDate = (time: (string[][] | undefined)[] | undefined) => (date: Date): boolean => {\r\n  if (date < now) return false;\r\n  if (!time) return false;\r\n  return time.some(item => {\r\n    if (!item) return false;\r\n    return item.some(elem => {\r\n      const now = new Date(elem[0]);\r\n      return isEqualDate(date, now);\r\n    });\r\n  })\r\n};\r\n\r\nconst getEmptyDays = (dayOfWeek: number): TCalendarItem[] => {\r\n  const result = [];\r\n  if (dayOfWeek !== 1) {\r\n    const dateItem: TCalendarItem = {\r\n      name: 0,\r\n      free: false,\r\n      empty: true,\r\n    };\r\n    if (dayOfWeek === 0) {\r\n      for(let i = 0; i < 6; i++) {\r\n        result.push(dateItem);\r\n      }\r\n    } else {\r\n      for(let i = 1; i < dayOfWeek; i++) {\r\n        result.push(dateItem);\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nexport const getDateList = (date: Date, time: (string[][] | undefined)[] | undefined): TCalendarItem[] => {\r\n  const currentMonth = date.getMonth();\r\n  const localDate = new Date(date);\r\n  const isFreeDateHandle = isFreeDate(time);\r\n  localDate.setDate(1);\r\n  const dayOfWeek = localDate.getDay();\r\n  const result = getEmptyDays(dayOfWeek);\r\n  while(localDate.getMonth() === currentMonth) {\r\n    const dateItem: TCalendarItem = {\r\n      name: localDate.getDate(),\r\n      free: isFreeDateHandle(localDate)\r\n    };\r\n    result.push(dateItem);\r\n    localDate.setDate(localDate.getDate() + 1);\r\n  }\r\n  return result;\r\n}\r\n\r\nexport const isEqualDate = (first: Date | null, second: Date | null = now): boolean => {\r\n  if (!first || !second) return false;\r\n  return first.getDate() === second.getDate()\r\n    && first.getMonth() === second.getMonth()\r\n    && first.getFullYear() === second.getFullYear();\r\n}\r\n","export enum APIConstants {\r\n  API_URL = 'https://longavitas.ru/lib/widget/send.php',\r\n  API_LOGIN = 'admin',\r\n  API_PASSWORD = 'admin'\r\n}","import React, { FC, useState, useMemo } from 'react';\r\nimport { Field, useField } from 'react-final-form';\r\n\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  FormControl,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  Tooltip,\r\n  Box,\r\n  Button\r\n} from \"@mui/material\";\r\nimport { CalendarToday, ArrowBackIosNew, ArrowForwardIos } from '@mui/icons-material';\r\n\r\nimport { IInput } from \"./input.types\";\r\nimport { DaysOfWeek, Months } from \"../Widget/index.constant\";\r\nimport { getDateList, isEqualDate } from \"../../utils/index.util\";\r\nimport { TButtonVariant } from \"../Widget/index.types\";\r\n\r\nconst Calendar: FC<IInput> = ({ name, title, validate, disabled, state }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [date, setDate] = useState(new Date());\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\r\n  const doctor = useField('doctor');\r\n  const time = doctor.input.value\r\n    ? [state?.doctors?.find(doc => doc.id === doctor.input.value)!.time]\r\n    : state?.doctors?.map(item => item.time);\r\n  const dateList = useMemo(() => getDateList(date, time), [doctor.input.value, date]);\r\n\r\n  const changeCalendarVisibility = (val: boolean): void => {\r\n    setIsOpen(val);\r\n  }\r\n\r\n  const changeCalendarMonth = (vector: boolean): void => {\r\n    if (vector) {\r\n      setDate(prev => {\r\n        const localDate = new Date(prev);\r\n        localDate.setMonth(prev.getMonth() + 1);\r\n        return localDate;\r\n      })\r\n    } else {\r\n      setDate(prev => {\r\n        const localDate = new Date(prev);\r\n        localDate.setMonth(prev.getMonth() - 1);\r\n        return localDate;\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Field name={name} validate={validate}>\r\n      {({input, meta}) => {\r\n        return (\r\n          <>\r\n            <Tooltip placement={'right'} title={disabled ? 'Заполните предыдущие поля' : ''}>\r\n              <FormControl variant=\"outlined\">\r\n                <InputLabel htmlFor=\"date\">{title}</InputLabel>\r\n                <OutlinedInput\r\n                  onFocus={() => changeCalendarVisibility(true)}\r\n                  id=\"date\"\r\n                  type={'text'}\r\n                  value={input.value}\r\n                  disabled={disabled}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        disabled={disabled}\r\n                        onClick={() => changeCalendarVisibility(true)}\r\n                        edge=\"end\"\r\n                      >\r\n                        <CalendarToday />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  label={title}\r\n                />\r\n              </FormControl>\r\n            </Tooltip>\r\n            <Dialog\r\n              onClose={() => changeCalendarVisibility(false)}\r\n              open={isOpen}\r\n              disableRestoreFocus\r\n            >\r\n              <div className={'UMC-widget-calendar-wrapper'}>\r\n                <DialogTitle>\r\n                  <div className={'UMC-widget-calendar-header'}>\r\n                    <IconButton onClick={() => changeCalendarMonth(false)}>\r\n                      <ArrowBackIosNew />\r\n                    </IconButton>\r\n                    <div className={'UMC-widget-calendar-header__text'}>\r\n                      {Months[date.getMonth()]} {date.getFullYear()}\r\n                    </div>\r\n                    <IconButton onClick={() => changeCalendarMonth(true)}>\r\n                      <ArrowForwardIos />\r\n                    </IconButton>\r\n                  </div>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                  <div className={'UMC-widget-calendar__header UMC-widget-calendar__grid'}>\r\n                    {DaysOfWeek.map(item => (\r\n                      <div key={item} className={'UMC-widget-calendar__box UMC-widget-calendar__box_header'}>{item}</div>\r\n                    ))}\r\n                  </div>\r\n                  <div className={'UMC-widget-calendar__grid'}>\r\n                    {dateList.map(item => {\r\n                      const thisDate = new Date(date);\r\n                      thisDate.setDate(item.name);\r\n                      const isToday = isEqualDate(thisDate);\r\n                      const isValue = isEqualDate(thisDate, selectedDate);\r\n                      let variant: TButtonVariant = 'text';\r\n                      if (isToday) variant = 'outlined';\r\n                      if (isValue) {\r\n                        return (\r\n                          <div key={item.name} className={'UMC-widget-calendar__box UMC-widget-calendar__box_selected'}>\r\n                            {item.name}\r\n                          </div>\r\n                        );\r\n                      }\r\n                      if (item.free) {\r\n                        return (\r\n                          <div className={'UMC-widget-calendar__box'}>\r\n                            <Button\r\n                              onClick={() => setSelectedDate(thisDate)}\r\n                              variant={variant}\r\n                              size=\"small\"\r\n                              className={'UMC-widget-calendar__box'}\r\n                              key={item.name}\r\n                              type=\"submit\">\r\n                              {item.name}\r\n                            </Button>\r\n                          </div>\r\n                        );\r\n                      }\r\n                      if (!item.empty) {\r\n                        return (\r\n                          <div key={item.name}\r\n                            className={isToday\r\n                              ? 'UMC-widget-calendar__box UMC-widget-calendar__box_busy UMC-widget-calendar__box_outlined'\r\n                              : 'UMC-widget-calendar__box UMC-widget-calendar__box_busy'}\r\n                          >\r\n                            {item.name}\r\n                          </div>\r\n                        );\r\n                      }\r\n                      return <p></p>;\r\n                    })}\r\n                  </div>\r\n                </DialogContent>\r\n              </div>\r\n            </Dialog>\r\n          </>\r\n        );\r\n      }}\r\n    </Field>\r\n  );\r\n};\r\n\r\nexport default Calendar;","import React, { FC, useEffect } from 'react';\r\nimport { Stack } from \"@mui/material\";\r\n\r\nimport Select from \"../fields/Select\";\r\nimport { mapStateToSelectList } from \"../../utils/index.util\";\r\n\r\nimport { ISelect, TSelectItem } from \"../fields/input.types\";\r\nimport { TDoctorSelect } from \"./index.types\";\r\nimport { TFormValues } from \"../../store/store.types\";\r\nimport Calendar from \"../fields/Calendar\";\r\n\r\nconst DoctorSelect: FC<TDoctorSelect> = ({values, state, getData}) => {\r\n\r\n  const list: TSelectItem[] = [\r\n    {id: 2, name: 'Вариант 1', value: 1},\r\n    {id: 3, name: 'Вариант 2', value: 2},\r\n    {id: 4, name: 'Вариант 3', value: 3},\r\n  ];\r\n\r\n  const selectList: ISelect[] = [\r\n    {list: state.clinics\r\n        ? mapStateToSelectList(state.clinics)\r\n        : list,\r\n      name: 'clinic',\r\n      title: 'Выберите филиал',\r\n      type: 'select',\r\n      id: 1},\r\n    {list: state.specializations\r\n        ? mapStateToSelectList(state.specializations)\r\n        : list,\r\n      name: 'specialization',\r\n      title: 'Выберите специализацию',\r\n      type: 'select',\r\n      id: 2,\r\n      deps: ['clinic']},\r\n    {list: state.doctors\r\n        ? mapStateToSelectList(state.doctors.filter(item => item.specialization === values.specialization))\r\n        : list,\r\n      name: 'doctor',\r\n      title: 'Выберите врача',\r\n      type: 'select',\r\n      id: 3,\r\n      deps: ['clinic', 'specialization']},\r\n    {name: 'date',\r\n      title: 'Выберите дату приема',\r\n      type: 'date',\r\n      id: 4,\r\n      state: state,\r\n      deps: ['clinic', 'specialization', 'doctor']},\r\n  ];\r\n\r\n  const hasntValue = (item: (keyof TFormValues)[], parent: TFormValues): boolean => {\r\n    return item.some(elem => {\r\n      return !(elem in parent && parent[elem]);\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (values.clinic) {\r\n      getData && getData(values.clinic);\r\n    }\r\n  }, [values.clinic]);\r\n\r\n  return (\r\n    <Stack spacing={2}>\r\n      {selectList.map(item => {\r\n        const disabled = item.deps ? hasntValue(item.deps, values) : false;\r\n        if (item.type === 'select') {\r\n          return (\r\n            <Select key={item.id} {...item} disabled={disabled} />\r\n          );\r\n        } else if (item.type === 'date') {\r\n          return (\r\n            <Calendar key={item.id} disabled={disabled} {...item} />\r\n          );\r\n        }\r\n      })}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default DoctorSelect;","export enum ActionTypes {\r\n  SET_CLINICS = 'SET_CLINICS',\r\n  SET_LOADING = 'SET_LOADING',\r\n  SET_DATA = 'SET_DATA'\r\n}","import { APIConstants } from \"./index.constant\";\r\nimport { TApiParams, TUrlParams } from \"./index.types\";\r\n\r\nclass API {\r\n  public async get(urlParams: TUrlParams): Promise<any> {\r\n    const params: TApiParams = {\r\n      method: 'GET',\r\n      params: urlParams\r\n    };\r\n    return this.request(params);\r\n  }\r\n\r\n  public async post(data: any, urlParams: TUrlParams): Promise<any> {\r\n    const params: TApiParams = {\r\n      method: 'POST',\r\n      params: urlParams\r\n    };\r\n    return this.request(params, data);\r\n  }\r\n\r\n  private async request(params: TApiParams, data: any | undefined = undefined): Promise<any> {\r\n    try {\r\n      const url = APIConstants.API_URL + (params.params ? this.getParamsFromObject(params.params) : '');\r\n      const response = await fetch(url, {\r\n        method: params.method,\r\n        body: data,\r\n        headers: {\r\n          Authorization: \"Basic \" + btoa(APIConstants.API_LOGIN + ':' + APIConstants.API_PASSWORD),\r\n        }\r\n      })\r\n      return await response.json();\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  private getParamsFromObject(object: {[key: string]: string}): string {\r\n    const objectParams = Object.entries(object).map(item => item.join('='));\r\n    return '?' + objectParams.join('&');\r\n  }\r\n}\r\n\r\nexport default new API();","import API from './index';\r\n\r\nimport { TClinicItem, TDoctorPayloadItem } from \"../store/store.types\";\r\nimport { getISODate } from \"../utils/index.util\";\r\n\r\nexport const getClinics = async (): Promise<TClinicItem[]> => {\r\n  return API.get({type: 'clinic'});\r\n}\r\n\r\nexport const getOtherData = async (clinicId: string): Promise<TDoctorPayloadItem[]> => {\r\n  const startDate = getISODate(new Date());\r\n  return API.get({type: 'time', clinicId, startDate});\r\n}","import { TAction, TActionCreator, TAppState, TClinicItem } from \"./store.types\";\r\nimport { ActionTypes } from \"./store.constants\";\r\n\r\nexport const setClinicAC: TActionCreator<TClinicItem[]> = (payload) => {\r\n  return {type: ActionTypes.SET_CLINICS, payload};\r\n}\r\nexport const setLoadingAC: TActionCreator<boolean> = (payload) => {\r\n  return {type: ActionTypes.SET_LOADING, payload};\r\n}\r\nexport const setDataAC: TActionCreator<Partial<TAppState>> = (payload) => {\r\n  return {type: ActionTypes.SET_DATA, payload};\r\n}","import { Reducer } from \"react\";\r\n\r\nimport { TAction, TAppState } from \"./store.types\";\r\nimport { ActionTypes } from \"./store.constants\";\r\n\r\nexport const initialState: TAppState = {\r\n  clinics: null,\r\n  loading: false,\r\n  doctors: null,\r\n  specializations: null\r\n}\r\n\r\nexport const rootReducer: Reducer<TAppState, TAction<any>> = (state, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_CLINICS: {\r\n      return {...state, clinics: action.payload};\r\n    }\r\n    case ActionTypes.SET_LOADING: {\r\n      return {...state, loading: action.payload};\r\n    }\r\n    case ActionTypes.SET_DATA: {\r\n      return {\r\n        ...state,\r\n        doctors: action.payload.doctors,\r\n        specializations: action.payload.specializations\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}","import React, {FC, useContext, useEffect, useReducer, useState} from 'react';\r\nimport {Form} from 'react-final-form';\r\nimport {\r\n  Box,\r\n  Button,\r\n  CircularProgress,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Step,\r\n  StepLabel,\r\n  Stepper,\r\n  Tooltip\r\n} from \"@mui/material\";\r\n\r\nimport DoctorSelect from \"../DoctorSelect\";\r\nimport {getClinics, getOtherData} from \"../../api/data.api\";\r\nimport {setClinicAC, setDataAC, setLoadingAC} from \"../../store/action-creators\";\r\nimport {initialState, rootReducer} from \"../../store\";\r\n\r\nimport {TDoctorItem, TFormValues} from \"../../store/store.types\";\r\nimport {TStep} from \"./index.types\";\r\nimport {TDoctorSelect} from \"../DoctorSelect/index.types\";\r\nimport {SITE_ADDRESS} from \"../../App\";\r\nimport {ClinicIds, SiteAdresses} from \"./index.constant\";\r\n\r\nconst Widget: FC = () => {\r\n\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [state, dispatch] = useReducer(rootReducer, initialState);\r\n  const siteAddress = useContext(SITE_ADDRESS);\r\n\r\n  console.log(state);\r\n\r\n  const initialValues = {\r\n    clinic: siteAddress === SiteAdresses.SITE_DEV ? ClinicIds.SITE_MAIN : ClinicIds.SITE_SECOND,\r\n  };\r\n\r\n  const steps: TStep[] = [\r\n    {id: 1, title: 'Выбор врача', completed: false},\r\n    {id: 2, title: 'Личные данные', completed: false},\r\n  ];\r\n\r\n  const stepsContent: FC<TDoctorSelect>[] = [\r\n    DoctorSelect\r\n  ];\r\n\r\n  const VisibleComponent = stepsContent[activeStep];\r\n\r\n  const handleSubmit = async (values: TFormValues): Promise<void> => {\r\n    console.log(values);\r\n  }\r\n\r\n  const changeStep = (step: number): void => {\r\n    setActiveStep(step);\r\n  }\r\n\r\n  const localGetClinic = async () => {\r\n    dispatch(setLoadingAC(true));\r\n    const result = await getClinics();\r\n    dispatch(setClinicAC(result));\r\n    dispatch(setLoadingAC(false));\r\n  }\r\n\r\n  const localGetOtherData = async (id: string) => {\r\n    dispatch(setLoadingAC(true));\r\n    const result = await getOtherData(id);\r\n    const payload: {doctors: TDoctorItem[], specializations: string[]} = {\r\n      doctors: [],\r\n      specializations: [],\r\n    }\r\n    result.forEach(item => {\r\n      const doctorItem: TDoctorItem = {\r\n        id: item.employee.id,\r\n        time: item.time,\r\n        name: item.employee.name,\r\n        specialization: item.employee.spec\r\n      }\r\n      if (item.employee.spec) {\r\n        payload.doctors.push(doctorItem);\r\n        if (!payload.specializations.includes(item.employee.spec)) {\r\n          payload.specializations.push(item.employee.spec);\r\n        }\r\n      }\r\n    })\r\n    dispatch(setDataAC(payload));\r\n    dispatch(setLoadingAC(false));\r\n  }\r\n\r\n  useEffect(() => {\r\n    localGetClinic();\r\n  }, []);\r\n\r\n  console.log();\r\n\r\n  return (\r\n    <Dialog maxWidth=\"xl\" open={isOpen}>\r\n      <Form onSubmit={handleSubmit} initialValues={initialValues}>\r\n        {({handleSubmit, values}) => {\r\n          return (\r\n            <form className={'UMC-widget-wrapper'} onSubmit={handleSubmit}>\r\n              <DialogTitle>\r\n                Запись на прием\r\n              </DialogTitle>\r\n              <DialogContent>\r\n                <Stepper className={'UMC-widget-steps__header'} activeStep={activeStep}>\r\n                  {steps.map(item => {\r\n                    return (\r\n                      <Step completed={item.completed} key={item.id}>\r\n                        <StepLabel>{item.title}</StepLabel>\r\n                      </Step>\r\n                    );\r\n                  })}\r\n                </Stepper>\r\n                <Box className={'UMC-widget-content'}>\r\n                  <VisibleComponent getData={localGetOtherData} state={state} values={values} />\r\n                </Box>\r\n              </DialogContent>\r\n              <DialogActions className={'UMC-widget-btn-area'}>\r\n                <Tooltip placement={'top'} title={'Заполните все обязательные поля'}>\r\n                  <Button type={'submit'}>Следующий шаг</Button>\r\n                </Tooltip>\r\n              </DialogActions>\r\n            </form>\r\n          );\r\n        }}\r\n      </Form>\r\n      {state.loading && <Box className={'UMC-widget-loading-screen'} sx={{display: 'flex'}}>\r\n        <CircularProgress/>\r\n      </Box>}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default Widget;","import React, { FC } from 'react';\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Widget from \"./components/Widget\";\r\n\r\nconst Paths: {[key: string]: string} = {\r\n  default: '/'\r\n}\r\n\r\nexport const SITE_ADDRESS = React.createContext(window.location.origin);\r\n\r\nconst App: FC = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path={Paths.default}><Widget /></Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter hashType={'noslash'}>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}