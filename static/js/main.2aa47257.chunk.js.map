{"version":3,"sources":["components/Widget/index.constant.ts","components/fields/Select.tsx","utils/index.util.ts","api/index.constant.ts","components/fields/Calendar.tsx","utils/validate.util.ts","components/DoctorSelect/index.tsx","store/store.constants.ts","api/index.ts","api/data.api.ts","store/action-creators.ts","store/index.ts","components/fields/Input.tsx","components/fields/CheckboxInput.tsx","components/Personal/index.tsx","components/Widget/index.tsx","App.tsx","index.tsx"],"names":["SiteAdresses","ClinicIds","SelectInput","resetHandle","resetDeps","list","name","title","validate","disabled","itemList","input","meta","Tooltip","FormControl","InputLabel","className","touched","error","htmlFor","CircularProgress","Select","onChange","event","target","value","label","map","item","MenuItem","id","FormHelperText","mapStateToSelectList","getStartNull","num","String","getISOTime","date","getHours","getMinutes","now","Date","getDateList","time","currentMonth","getMonth","localDate","isFreeDateHandle","some","elem","isEqualDate","isFreeDate","setDate","result","dayOfWeek","dateItem","free","empty","i","push","getEmptyDays","getDay","getDate","first","second","getFullYear","isEqualTime","APIConstants","Months","DaysOfWeek","Calendar","state","useState","isOpen","setIsOpen","selectedDate","setSelectedDate","doctor","useField","doctors","find","doc","dateList","useMemo","timeList","forEach","dateStr","thisDate","Array","from","Set","getTimeByDate","changeCalendarVisibility","val","changeCalendarMonth","vector","prev","setMonth","getVisibleDateTime","color","variant","OutlinedInput","onFocus","type","console","log","endAdornment","InputAdornment","position","IconButton","onClick","edge","CalendarToday","Dialog","onClose","open","disableRestoreFocus","DialogTitle","ArrowBackIosNew","ArrowForwardIos","DialogContent","isToday","toDateString","isRequired","isLength","min","max","length","DoctorSelect","getData","formValues","useForm","getState","values","clinic","selectList","clinics","specializations","deps","filter","specialization","useEffect","Stack","spacing","parent","hasntValue","ActionTypes","API","urlParams","params","method","this","request","data","undefined","url","API_URL","getParamsFromObject","fetch","body","headers","Authorization","btoa","API_LOGIN","API_PASSWORD","response","json","object","Object","entries","join","getClinics","a","get","getOtherData","clinicId","startDate","setLoadingAC","payload","SET_LOADING","setDataAC","SET_DATA","initialState","loading","rootReducer","action","SET_CLINICS","Input","props","TextField","style","width","FormControlLabel","control","Checkbox","Personal","inputList","CheckboxInput","Widget","activeStep","setActiveStep","useReducer","dispatch","initialValues","useContext","SITE_ADDRESS","SITE_DEV","SITE_MAIN","SITE_SECOND","confirm","steps","VisibleComponent","handleSubmit","localGetClinic","localGetOtherData","doctorItem","employee","spec","includes","maxWidth","onSubmit","form","hasValidationErrors","Stepper","completed","Step","StepLabel","Box","fields","batch","change","DialogActions","Button","startIcon","placement","sx","display","Paths","React","createContext","window","location","origin","App","path","ReactDOM","render","hashType","document","getElementById"],"mappings":"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","file":"static/js/main.2aa47257.chunk.js","sourcesContent":["export enum SiteAdresses {\r\n    SITE_MAIN = 'https://longavitas.ru',\r\n    SITE_SECOND = 'https://longavita-ct.ru',\r\n    SITE_DEV = 'http://localhost:3000',\r\n}\r\n\r\nexport enum ClinicIds {\r\n    SITE_MAIN = '058826cf-b50f-11e9-a205-ac1f6b67f28a',\r\n    SITE_SECOND = '9d050044-1007-11ec-a220-ac1f6b67f28a',\r\n}\r\n\r\nexport const Months = [\r\n  'Январь',\r\n  'Февраль',\r\n  'Март',\r\n  'Апрель',\r\n  'Май',\r\n  'Июнь',\r\n  'Июль',\r\n  'Август',\r\n  'Сентябрь',\r\n  'Октябрь',\r\n  'Ноябрь',\r\n  'Декабрь',\r\n];\r\n\r\nexport const DaysOfWeek = [\r\n  'Пн',\r\n  'Вт',\r\n  'Ср',\r\n  'Чт',\r\n  'Пт',\r\n  'Сб',\r\n  'Вс',\r\n];","import React, { FC } from 'react';\r\nimport { Field } from 'react-final-form';\r\nimport {\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Tooltip,\r\n  FormHelperText,\r\n  SelectChangeEvent, CircularProgress\r\n} from \"@mui/material\";\r\n\r\nimport { ISelect } from \"./input.types\";\r\n\r\nconst SelectInput: FC<ISelect> = ({\r\n  resetHandle,\r\n  resetDeps,\r\n  list,\r\n  name,\r\n  title,\r\n  validate,\r\n  disabled\r\n}) => {\r\n  const itemList = list || [];\r\n\r\n  return (\r\n    <Field name={name} validate={validate}>\r\n      {({input, meta}) => {\r\n        const onChangeHandle = (event: SelectChangeEvent) => {\r\n          resetHandle && resetHandle(resetDeps);\r\n          input.onChange(event.target.value);\r\n        }\r\n        return (\r\n          <Tooltip title={disabled ? 'Заполните предыдущие поля' : ''}>\r\n            <FormControl>\r\n              <InputLabel\r\n                className={!disabled && meta.touched && meta.error && 'UMC-widget-input-error'}\r\n                htmlFor={name}>\r\n                {list ? title : <CircularProgress />}\r\n              </InputLabel>\r\n              <Select\r\n                error={!!(meta.touched && meta.error)}\r\n                disabled={disabled}\r\n                {...input}\r\n                onChange={onChangeHandle}\r\n                label={title}\r\n                className={'UMC-widget-input UMC-widget-select'}>\r\n                {itemList.map(item => (\r\n                  <MenuItem key={item.id} value={item.value}>{item.name}</MenuItem>\r\n                ))}\r\n              </Select>\r\n              {!disabled && meta.touched && meta.error\r\n                && <FormHelperText\r\n                    className={'UMC-widget-input-error'}>\r\n                  {meta.error}\r\n                </FormHelperText>}\r\n            </FormControl>\r\n          </Tooltip>\r\n        );\r\n      }}\r\n    </Field>\r\n  );\r\n};\r\n\r\nexport default SelectInput;","import { TSelectItem } from \"../components/fields/input.types\";\r\nimport { TClinicItem } from \"../store/store.types\";\r\nimport { TCalendarItem } from \"../components/Widget/index.types\";\r\n\r\nexport const mapStateToSelectList = <Type extends TClinicItem | string>(list: Type[] | null | undefined): TSelectItem[] | [] => {\r\n  if (!list) return [];\r\n  return list.map(item => {\r\n    return typeof item === 'string'\r\n      ? {id: item, value: item, name: item}\r\n      : {id: item.id, value: item.id, name: item.name};\r\n  });\r\n};\r\n\r\nexport const getStartNull = (num: number): string => {\r\n  if (num < 10) {\r\n    return '0' + num;\r\n  }\r\n  return String(num);\r\n};\r\n\r\nexport const getISODate = (date: Date): string => {\r\n  return date.getFullYear() + '-'\r\n    + getStartNull(date.getMonth() + 1) + '-'\r\n    + getStartNull(date.getDate()) + 'T'\r\n    + getStartNull(date.getHours()) + ':'\r\n    + getStartNull(date.getMinutes()) + ':00';\r\n};\r\n\r\nexport const getISOTime = (date: Date): string => {\r\n  return getStartNull(date.getHours()) + ':'\r\n    + getStartNull(date.getMinutes());\r\n};\r\n\r\nconst now = new Date();\r\n\r\nexport const isFreeDate = (time: (string[][] | undefined)[] | undefined) => (date: Date): boolean => {\r\n  if (date < now) return false;\r\n  if (!time) return false;\r\n  return time.some(item => {\r\n    if (!item) return false;\r\n    return item.some(elem => {\r\n      const now = new Date(elem[0]);\r\n      return isEqualDate(date, now);\r\n    });\r\n  })\r\n};\r\n\r\nconst getEmptyDays = (dayOfWeek: number): TCalendarItem[] => {\r\n  const result = [];\r\n  if (dayOfWeek !== 1) {\r\n    const dateItem: TCalendarItem = {\r\n      name: 0,\r\n      free: false,\r\n      empty: true,\r\n    };\r\n    if (dayOfWeek === 0) {\r\n      for(let i = 0; i < 6; i++) {\r\n        result.push(dateItem);\r\n      }\r\n    } else {\r\n      for(let i = 1; i < dayOfWeek; i++) {\r\n        result.push(dateItem);\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nexport const getDateList = (date: Date, time: (string[][] | undefined)[] | undefined): TCalendarItem[] => {\r\n  const currentMonth = date.getMonth();\r\n  const localDate = new Date(date);\r\n  const isFreeDateHandle = isFreeDate(time);\r\n  localDate.setDate(1);\r\n  const dayOfWeek = localDate.getDay();\r\n  const result = getEmptyDays(dayOfWeek);\r\n  while(localDate.getMonth() === currentMonth) {\r\n    const dateItem: TCalendarItem = {\r\n      name: localDate.getDate(),\r\n      free: isFreeDateHandle(localDate)\r\n    };\r\n    result.push(dateItem);\r\n    localDate.setDate(localDate.getDate() + 1);\r\n  }\r\n  return result;\r\n}\r\n\r\nexport const isEqualDate = (first: Date | null, second: Date | null = now): boolean => {\r\n  if (!first || !second) return false;\r\n  return first.getDate() === second.getDate()\r\n    && first.getMonth() === second.getMonth()\r\n    && first.getFullYear() === second.getFullYear();\r\n}\r\n\r\nexport const isEqualTime = (first: Date | null, second: Date | null = now): boolean => {\r\n  if (!first || !second) return false;\r\n  return first.getHours() === second.getHours()\r\n    && first.getMinutes() === second.getMinutes();\r\n}\r\n\r\nexport const getTimeByDate = (date: Date | null, time: (string[][] | undefined)[] | undefined): Date[] => {\r\n  if (!time || !date) return [];\r\n  const result: Date[] = [];\r\n  time.forEach(item => {\r\n    item?.forEach(elem => {\r\n      elem.forEach(dateStr => {\r\n        const thisDate = new Date(dateStr);\r\n        if (isEqualDate(thisDate, date)) {\r\n          result.push(thisDate);\r\n        }\r\n      })\r\n    });\r\n  });\r\n  return Array.from(new Set(result));\r\n}\r\n\r\nexport const getVisibleDateTime = (date: Date | null): string => {\r\n  if (!date) return '';\r\n  return getStartNull(date.getDate()) + '.'\r\n    + getStartNull(date.getMonth() + 1) + '.'\r\n    + date.getFullYear() + ' '\r\n    + getStartNull(date.getHours()) + ':'\r\n    + getStartNull(date.getMinutes());\r\n}","export enum APIConstants {\r\n  API_URL = 'https://longavitas.ru/lib/widget/send.php',\r\n  API_LOGIN = 'admin',\r\n  API_PASSWORD = 'admin'\r\n}","import React, { FC, useState, useMemo } from 'react';\r\nimport { Field, useField } from 'react-final-form';\r\n\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  FormControl,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  Tooltip,\r\n  FormHelperText\r\n} from \"@mui/material\";\r\nimport { CalendarToday, ArrowBackIosNew, ArrowForwardIos } from '@mui/icons-material';\r\n\r\nimport { IInput } from \"./input.types\";\r\nimport { DaysOfWeek, Months } from \"../Widget/index.constant\";\r\nimport {\r\n  getDateList,\r\n  getISOTime,\r\n  getTimeByDate, getVisibleDateTime,\r\n  isEqualDate,\r\n  isEqualTime\r\n} from \"../../utils/index.util\";\r\n\r\ntype TIconColor = 'inherit' | 'error' | 'disabled';\r\n\r\nconst Calendar: FC<IInput> = ({ name, title, validate, disabled, state }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [date, setDate] = useState(new Date());\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\r\n  const doctor = useField('doctor');\r\n  const time = doctor.input.value\r\n    ? [state?.doctors?.find(doc => doc.id === doctor.input.value)!.time]\r\n    : state?.doctors?.map(item => item.time);\r\n  const dateList = useMemo(() => getDateList(date, time), [doctor.input.value, date]);\r\n  const timeList = useMemo(() => getTimeByDate(selectedDate, time), [selectedDate, doctor.input.value]);\r\n\r\n  const changeCalendarVisibility = (val: boolean): void => {\r\n    setIsOpen(val);\r\n  }\r\n\r\n  const changeCalendarMonth = (vector: boolean): void => {\r\n    if (vector) {\r\n      setDate(prev => {\r\n        const localDate = new Date(prev);\r\n        localDate.setMonth(prev.getMonth() + 1);\r\n        return localDate;\r\n      })\r\n    } else {\r\n      setDate(prev => {\r\n        const localDate = new Date(prev);\r\n        localDate.setMonth(prev.getMonth() - 1);\r\n        return localDate;\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Field name={name} validate={validate}>\r\n      {({input, meta}) => {\r\n        const onChange = (date: Date) => {\r\n          input.onChange(date);\r\n          setIsOpen(false);\r\n        }\r\n        const value = getVisibleDateTime(input.value);\r\n        let color: TIconColor = 'inherit';\r\n        if (meta.touched && meta.error) color = 'error';\r\n        if (disabled) color = 'disabled';\r\n        return (\r\n          <>\r\n            <Tooltip title={disabled ? 'Заполните предыдущие поля' : ''}>\r\n              <FormControl variant=\"outlined\">\r\n                <InputLabel\r\n                  className={!disabled && meta.touched && meta.error && 'UMC-widget-input-error'}\r\n                  htmlFor=\"date\">\r\n                  {title}\r\n                </InputLabel>\r\n                <OutlinedInput\r\n                  error={!!(meta.touched && meta.error)}\r\n                  onFocus={() => changeCalendarVisibility(true)}\r\n                  id=\"date\"\r\n                  type={'text'}\r\n                  value={value}\r\n                  onChange={() => console.log(input.value)}\r\n                  disabled={disabled}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        disabled={disabled}\r\n                        onClick={() => changeCalendarVisibility(true)}\r\n                        edge=\"end\"\r\n                      >\r\n                        <CalendarToday color={color} />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  label={title}\r\n                />\r\n                {!disabled && meta.touched && meta.error\r\n                  && <FormHelperText\r\n                      className={'UMC-widget-input-error'}>\r\n                    {meta.error}\r\n                  </FormHelperText>}\r\n              </FormControl>\r\n            </Tooltip>\r\n            <Dialog\r\n              onClose={() => changeCalendarVisibility(false)}\r\n              open={isOpen}\r\n              disableRestoreFocus\r\n            >\r\n              <div className={'UMC-widget-calendar-wrapper'}>\r\n                <DialogTitle>\r\n                  <div className={'UMC-widget-calendar-header'}>\r\n                    <IconButton onClick={() => changeCalendarMonth(false)}>\r\n                      <ArrowBackIosNew />\r\n                    </IconButton>\r\n                    <div className={'UMC-widget-calendar-header__text UMC-widget-title'}>\r\n                      {Months[date.getMonth()]} {date.getFullYear()}\r\n                    </div>\r\n                    <IconButton onClick={() => changeCalendarMonth(true)}>\r\n                      <ArrowForwardIos />\r\n                    </IconButton>\r\n                  </div>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                  <div className=\"UMC-widget-calendar-block\">\r\n                    <div className={'UMC-widget-calendar__header UMC-widget-calendar__grid'}>\r\n                      {DaysOfWeek.map(item => (\r\n                        <div key={item} className={'UMC-widget-calendar__box UMC-widget-calendar__box_header'}>{item}</div>\r\n                      ))}\r\n                    </div>\r\n                    <div className={'UMC-widget-calendar__grid'}>\r\n                      {dateList.map(item => {\r\n                        const thisDate = new Date(date);\r\n                        thisDate.setDate(item.name);\r\n                        const isToday = isEqualDate(thisDate);\r\n                        const isValue = isEqualDate(thisDate, selectedDate);\r\n                        if (isValue) {\r\n                          return (\r\n                            <div key={item.name} className={'UMC-widget-calendar__box UMC-widget-calendar__box_selected'}>\r\n                              {item.name}\r\n                            </div>\r\n                          );\r\n                        }\r\n                        if (item.free) {\r\n                          return (\r\n                            <div\r\n                              key={item.name}\r\n                              className={'UMC-widget-calendar__box UMC-widget-calendar__box_free'}\r\n                              onClick={() => setSelectedDate(thisDate)}>\r\n                              {item.name}\r\n                            </div>\r\n                          );\r\n                        }\r\n                        if (!item.empty) {\r\n                          return (\r\n                            <div key={item.name}\r\n                              className={isToday\r\n                                ? 'UMC-widget-calendar__box UMC-widget-calendar__box_busy UMC-widget-calendar__box_outlined'\r\n                                : 'UMC-widget-calendar__box UMC-widget-calendar__box_busy'}\r\n                            >\r\n                              {item.name}\r\n                            </div>\r\n                          );\r\n                        }\r\n                        return <p key={item.name}></p>;\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                  {selectedDate && <div className={'UMC-widget-time-block'}>\r\n                    <div className={'UMC-widget-title UMC-widget-time__title'}>Время приема:</div>\r\n                    <div className={'UMC-widget-time'}>\r\n                      {timeList.map(item => (\r\n                        <time\r\n                          key={item.toDateString()}\r\n                          onClick={() => onChange(item)}\r\n                          className={isEqualTime(item, input.value)\r\n                            ? 'UMC-widget-time__box UMC-widget-time__box_selected'\r\n                            : 'UMC-widget-time__box'}>\r\n                          {getISOTime(item)}\r\n                        </time>\r\n                      ))}\r\n                    </div>\r\n                  </div>}\r\n                </DialogContent>\r\n              </div>\r\n            </Dialog>\r\n          </>\r\n        );\r\n      }}\r\n    </Field>\r\n  );\r\n};\r\n\r\nexport default Calendar;","export const isRequired = (value: string | boolean): string | undefined => {\r\n  if (!value) return 'Это поле обязательно';\r\n}\r\n\r\nexport const isLength = (\r\n  min: number | undefined = 1,\r\n  max: number | undefined = 1\r\n) => (value: string): string | undefined => {\r\n  if (!value) return 'Это поле обязательно';\r\n  if (value.length < min) return `Длина поля должна быть не менее ${min} символов`;\r\n  if (value.length > max) return `Длина поля должна быть не более ${max} символов`;\r\n}","import React, { FC, useEffect } from 'react';\r\nimport { Stack } from \"@mui/material\";\r\n\r\nimport Select from \"../fields/Select\";\r\nimport { mapStateToSelectList } from \"../../utils/index.util\";\r\n\r\nimport { ISelect } from \"../fields/input.types\";\r\nimport { TStepComponent } from \"./index.types\";\r\nimport { TFormValues } from \"../../store/store.types\";\r\nimport Calendar from \"../fields/Calendar\";\r\nimport { isRequired } from \"../../utils/validate.util\";\r\nimport { useForm } from \"react-final-form\";\r\n\r\nconst DoctorSelect: FC<TStepComponent> = ({resetHandle, state, getData}) => {\r\n\r\n  // const list: TSelectItem[] = [\r\n  //   {id: 2, name: 'Вариант 1', value: 1},\r\n  //   {id: 3, name: 'Вариант 2', value: 2},\r\n  //   {id: 4, name: 'Вариант 3', value: 3},\r\n  // ];\r\n  const form = useForm<TFormValues>();\r\n  const formValues = form.getState().values;\r\n  const clinic = formValues.clinic;\r\n\r\n  const selectList: ISelect[] = [\r\n    {list: mapStateToSelectList(state.clinics),\r\n      name: 'clinic',\r\n      validate: isRequired,\r\n      title: 'Выберите филиал',\r\n      type: 'select',\r\n      resetDeps: ['specialization', 'doctor', 'date'],\r\n      id: 1},\r\n    {list: mapStateToSelectList(state.specializations),\r\n      name: 'specialization',\r\n      title: 'Выберите специализацию',\r\n      validate: isRequired,\r\n      type: 'select',\r\n      id: 2,\r\n      resetDeps: ['doctor', 'date'],\r\n      deps: ['clinic']},\r\n    {list: mapStateToSelectList(state.doctors?.filter(item => item.specialization === formValues.specialization)),\r\n      name: 'doctor',\r\n      title: 'Выберите врача',\r\n      validate: isRequired,\r\n      type: 'select',\r\n      id: 3,\r\n      resetDeps: ['date'],\r\n      deps: ['clinic', 'specialization']},\r\n    {name: 'date',\r\n      title: 'Выберите дату приема',\r\n      validate: isRequired,\r\n      type: 'date',\r\n      id: 4,\r\n      state: state,\r\n      deps: ['clinic', 'specialization', 'doctor']},\r\n  ];\r\n\r\n  const hasntValue = (item: (keyof TFormValues)[], parent: TFormValues): boolean => {\r\n    return item.some(elem => {\r\n      return !(elem in parent && parent[elem]);\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (clinic) {\r\n      getData(clinic);\r\n    }\r\n  }, [clinic]);\r\n\r\n  return (\r\n    <Stack spacing={2}>\r\n      {selectList.map(item => {\r\n        const disabled = item.deps ? hasntValue(item.deps, formValues) : false;\r\n        if (item.type === 'select') {\r\n          return (\r\n            <Select resetHandle={resetHandle} key={item.id} {...item} disabled={disabled} />\r\n          );\r\n        } else if (item.type === 'date') {\r\n          return (\r\n            <Calendar key={item.id} disabled={disabled} {...item} />\r\n          );\r\n        }\r\n      })}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default DoctorSelect;","export enum ActionTypes {\r\n  SET_CLINICS = 'SET_CLINICS',\r\n  SET_LOADING = 'SET_LOADING',\r\n  SET_DATA = 'SET_DATA'\r\n}","import { APIConstants } from \"./index.constant\";\r\nimport { TApiParams, TUrlParams } from \"./index.types\";\r\n\r\nclass API {\r\n  public async get(urlParams: TUrlParams): Promise<any> {\r\n    const params: TApiParams = {\r\n      method: 'GET',\r\n      params: urlParams\r\n    };\r\n    return this.request(params);\r\n  }\r\n\r\n  public async post(data: any, urlParams: TUrlParams): Promise<any> {\r\n    const params: TApiParams = {\r\n      method: 'POST',\r\n      params: urlParams\r\n    };\r\n    return this.request(params, data);\r\n  }\r\n\r\n  private async request(params: TApiParams, data: any | undefined = undefined): Promise<any> {\r\n    try {\r\n      const url = APIConstants.API_URL + (params.params ? this.getParamsFromObject(params.params) : '');\r\n      const response = await fetch(url, {\r\n        method: params.method,\r\n        body: data,\r\n        headers: {\r\n          Authorization: \"Basic \" + btoa(APIConstants.API_LOGIN + ':' + APIConstants.API_PASSWORD),\r\n        }\r\n      })\r\n      return await response.json();\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  private getParamsFromObject(object: {[key: string]: string}): string {\r\n    const objectParams = Object.entries(object).map(item => item.join('='));\r\n    return '?' + objectParams.join('&');\r\n  }\r\n}\r\n\r\nexport default new API();","import API from './index';\r\n\r\nimport { TClinicItem, TDoctorPayloadItem } from \"../store/store.types\";\r\nimport { getISODate } from \"../utils/index.util\";\r\n\r\nexport const getClinics = async (): Promise<TClinicItem[]> => {\r\n  return API.get({type: 'clinic'});\r\n}\r\n\r\nexport const getOtherData = async (clinicId: string): Promise<TDoctorPayloadItem[]> => {\r\n  const startDate = getISODate(new Date());\r\n  return API.get({type: 'time', clinicId, startDate});\r\n}","import { TActionCreator, TAppState, TClinicItem } from \"./store.types\";\r\nimport { ActionTypes } from \"./store.constants\";\r\n\r\nexport const setClinicAC: TActionCreator<TClinicItem[]> = (payload) => {\r\n  return {type: ActionTypes.SET_CLINICS, payload};\r\n}\r\nexport const setLoadingAC: TActionCreator<boolean> = (payload) => {\r\n  return {type: ActionTypes.SET_LOADING, payload};\r\n}\r\nexport const setDataAC: TActionCreator<Partial<TAppState>> = (payload) => {\r\n  return {type: ActionTypes.SET_DATA, payload};\r\n}","import { Reducer } from \"react\";\r\n\r\nimport { TAction, TAppState } from \"./store.types\";\r\nimport { ActionTypes } from \"./store.constants\";\r\n\r\nexport const initialState: TAppState = {\r\n  clinics: null,\r\n  loading: false,\r\n  doctors: null,\r\n  specializations: null\r\n}\r\n\r\nexport const rootReducer: Reducer<TAppState, TAction<any>> = (state, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.SET_CLINICS: {\r\n      return {...state, clinics: action.payload};\r\n    }\r\n    case ActionTypes.SET_LOADING: {\r\n      return {...state, loading: action.payload};\r\n    }\r\n    case ActionTypes.SET_DATA: {\r\n      return {\r\n        ...state,\r\n        doctors: action.payload.doctors,\r\n        specializations: action.payload.specializations\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}","import React, { FC } from 'react';\r\nimport { Field } from 'react-final-form';\r\nimport { FormHelperText, TextField } from \"@mui/material\";\r\nimport { IInput } from \"./input.types\";\r\n\r\nconst Input: FC<IInput> = (props) => {\r\n  return (\r\n    <Field name={props.name} validate={props.validate}>\r\n      {({ input, meta }) => (\r\n        <div>\r\n          <TextField\r\n            style={{width: '100%'}}\r\n            error={!!(meta.touched && meta.error)}\r\n            label={props.title}\r\n            {...input}\r\n          />\r\n          {meta.touched && meta.error\r\n            && <FormHelperText\r\n              className={'UMC-widget-input-error'}>\r\n              {meta.error}\r\n            </FormHelperText>}\r\n        </div>\r\n      )}\r\n    </Field>\r\n  );\r\n};\r\n\r\nexport default Input;","import React, { FC } from 'react';\r\nimport { Field } from 'react-final-form';\r\nimport { Checkbox, FormControlLabel, FormHelperText } from \"@mui/material\";\r\nimport { IInput } from \"./input.types\";\r\n\r\nconst Input: FC<IInput> = (props) => {\r\n  return (\r\n    <Field name={props.name} type={'checkbox'} validate={props.validate} >\r\n      {({ input, meta }) => (\r\n        <div>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                {...input}\r\n                value={input.value || ''}\r\n              />\r\n            }\r\n            label={props.title} />\r\n            {meta.touched && meta.error\r\n              && <FormHelperText\r\n                  className={'UMC-widget-input-error'}>\r\n                {meta.error}\r\n              </FormHelperText>}\r\n        </div>\r\n      )}\r\n    </Field>\r\n  );\r\n};\r\n\r\nexport default Input;","import React, { FC } from 'react';\r\nimport { Stack } from \"@mui/material\";\r\nimport { IInput } from \"../fields/input.types\";\r\nimport { TStepComponent } from \"../DoctorSelect/index.types\";\r\nimport Input from \"../fields/Input\";\r\nimport CheckboxInput from \"../fields/CheckboxInput\";\r\nimport { isLength, isRequired } from \"../../utils/validate.util\";\r\n\r\nconst Personal: FC<TStepComponent> = () => {\r\n\r\n  const inputList: IInput[] = [\r\n    {name: 'name',\r\n      validate: isLength(2, 20),\r\n      title: 'Введите имя',\r\n      type: 'input',\r\n      id: 1},\r\n    {name: 'surname',\r\n      validate: isLength(2, 20),\r\n      title: 'Введите фамилию',\r\n      type: 'input',\r\n      id: 2},\r\n    {name: 'number',\r\n      validate: isLength(2, 20),\r\n      title: 'Введите телефон',\r\n      type: 'input',\r\n      id: 3},\r\n    {name: 'confirm',\r\n      validate: isRequired,\r\n      title: 'Я согласен с Политикой конфиденциальности',\r\n      type: 'checkbox',\r\n      id: 4},\r\n  ];\r\n\r\n  return (\r\n    <Stack spacing={2}>\r\n      {inputList.map(item => {\r\n        if (item.type === 'checkbox') {\r\n          return <CheckboxInput key={item.id} {...item} />;\r\n        }\r\n        return <Input key={item.id} {...item} />;\r\n      })}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default Personal;","import React, {FC, useContext, useEffect, useReducer, useState} from 'react';\r\nimport {Form} from 'react-final-form';\r\nimport {\r\n  Box,\r\n  Button,\r\n  CircularProgress,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Step,\r\n  StepLabel,\r\n  Stepper,\r\n  Tooltip\r\n} from \"@mui/material\";\r\n\r\nimport DoctorSelect from \"../DoctorSelect\";\r\nimport {getClinics, getOtherData} from \"../../api/data.api\";\r\nimport {setClinicAC, setDataAC, setLoadingAC} from \"../../store/action-creators\";\r\nimport {initialState, rootReducer} from \"../../store\";\r\n\r\nimport {TDoctorItem, TFormValues} from \"../../store/store.types\";\r\nimport {TStep} from \"./index.types\";\r\nimport {TStepComponent} from \"../DoctorSelect/index.types\";\r\nimport {SITE_ADDRESS} from \"../../App\";\r\nimport {ClinicIds, SiteAdresses} from \"./index.constant\";\r\nimport Personal from \"../Personal\";\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n\r\nconst Widget: FC = () => {\r\n\r\n  const [isOpen, _] = useState(true);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [state, dispatch] = useReducer(rootReducer, initialState);\r\n  const siteAddress = useContext(SITE_ADDRESS);\r\n\r\n  const initialValues = {\r\n    clinic: siteAddress === SiteAdresses.SITE_DEV ? ClinicIds.SITE_MAIN : ClinicIds.SITE_SECOND,\r\n    confirm: true\r\n  };\r\n\r\n  const steps: TStep[] = [\r\n    {id: 0, title: 'Выбор врача'},\r\n    {id: 1, title: 'Личные данные'},\r\n  ];\r\n\r\n  const stepsContent: FC<TStepComponent>[] = [\r\n    DoctorSelect,\r\n    Personal\r\n  ];\r\n\r\n  const VisibleComponent = stepsContent[activeStep];\r\n\r\n  const handleSubmit = async (values: TFormValues): Promise<void> => {\r\n    if (activeStep) {\r\n      console.log(values);\r\n    } else {\r\n      setActiveStep(1);\r\n    }\r\n  }\r\n\r\n  const localGetClinic = async () => {\r\n    dispatch(setLoadingAC(true));\r\n    const result = await getClinics();\r\n    dispatch(setClinicAC(result));\r\n    dispatch(setLoadingAC(false));\r\n  }\r\n\r\n  const localGetOtherData = async (id: string) => {\r\n    dispatch(setLoadingAC(true));\r\n    const result = await getOtherData(id);\r\n    const payload: {doctors: TDoctorItem[], specializations: string[]} = {\r\n      doctors: [],\r\n      specializations: [],\r\n    }\r\n    result.forEach(item => {\r\n      const doctorItem: TDoctorItem = {\r\n        id: item.employee.id,\r\n        time: item.time,\r\n        name: item.employee.name,\r\n        specialization: item.employee.spec\r\n      }\r\n      if (item.employee.spec) {\r\n        payload.doctors.push(doctorItem);\r\n        if (!payload.specializations.includes(item.employee.spec)) {\r\n          payload.specializations.push(item.employee.spec);\r\n        }\r\n      }\r\n    })\r\n    dispatch(setDataAC(payload));\r\n    dispatch(setLoadingAC(false));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!state.clinics) {\r\n      localGetClinic();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Dialog maxWidth=\"xl\" open={isOpen}>\r\n      <Form onSubmit={handleSubmit} initialValues={initialValues}>\r\n        {({handleSubmit, form, values, touched, hasValidationErrors}) => {\r\n          const resetFields = (fields: (keyof TFormValues)[] | undefined) => {\r\n            if (fields) {\r\n              form.batch(() => {\r\n                fields.forEach(item => form.change(item, ''))\r\n              });\r\n            }\r\n          }\r\n          return (\r\n            <form className={'UMC-widget-wrapper'} onSubmit={handleSubmit}>\r\n              <DialogTitle>\r\n                Запись на прием\r\n              </DialogTitle>\r\n              <DialogContent>\r\n                <Stepper className={'UMC-widget-steps__header'} activeStep={activeStep}>\r\n                  {steps.map(item => {\r\n                    const completed = item.id <= activeStep;\r\n                    return (\r\n                      <Step completed={completed} key={item.id}>\r\n                        <StepLabel>{item.title}</StepLabel>\r\n                      </Step>\r\n                    );\r\n                  })}\r\n                </Stepper>\r\n                <Box className={'UMC-widget-content'}>\r\n                  <VisibleComponent resetHandle={resetFields} getData={localGetOtherData} state={state} />\r\n                </Box>\r\n              </DialogContent>\r\n              <DialogActions className={'UMC-widget-btn-area'}>\r\n                {activeStep\r\n                  ? <Button\r\n                      onClick={() => setActiveStep(0)}\r\n                      startIcon={<ArrowBackIcon />}\r\n                      type={'button'}>\r\n                      Назад\r\n                  </Button>\r\n                  : <></>}\r\n                <Tooltip\r\n                  placement={'top'}\r\n                  title={touched && hasValidationErrors ? 'Заполните все обязательные поля' : ''}>\r\n                  <Button type={'submit'}>{activeStep ? 'Записаться' : 'Следующий шаг'}</Button>\r\n                </Tooltip>\r\n              </DialogActions>\r\n            </form>\r\n          );\r\n        }}\r\n      </Form>\r\n      {state.loading && <Box className={'UMC-widget-loading-screen'} sx={{display: 'flex'}}>\r\n        <CircularProgress/>\r\n      </Box>}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default Widget;","import React, { FC } from 'react';\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Widget from \"./components/Widget\";\r\n\r\nconst Paths: {[key: string]: string} = {\r\n  default: '/'\r\n}\r\n\r\nexport const SITE_ADDRESS = React.createContext(window.location.origin);\r\n\r\nconst App: FC = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path={Paths.default}><Widget /></Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter hashType={'noslash'}>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}